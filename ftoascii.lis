     1                                  global ftoascii
     2                                  
     3                                  section .data
     4 00000000 0000000000000080            neg_mask dq 0x8000000000000000
     5                                  
     6                                  section .bss
     7                                      align 64
     8 00000000 <res 00000340>              storedata resb 832
     9                                  
    10                                  section .text
    11                                  ftoascii:
    12                                      ; Backup registers
    13 00000000 55                          push    rbp
    14 00000001 4889E5                      mov     rbp, rsp
    15 00000004 53                          push    rbx
    16 00000005 51                          push    rcx
    17 00000006 52                          push    rdx
    18 00000007 56                          push    rsi
    19 00000008 57                          push    rdi
    20 00000009 4150                        push    r8 
    21 0000000B 4151                        push    r9 
    22 0000000D 4152                        push    r10
    23 0000000F 4153                        push    r11
    24 00000011 4154                        push    r12
    25 00000013 4155                        push    r13
    26 00000015 4156                        push    r14
    27 00000017 4157                        push    r15
    28 00000019 9C                          pushf
    29                                  
    30 0000001A B807000000                  mov     rax, 7
    31 0000001F BA00000000                  mov     rdx, 0
    32 00000024 0FAE2425[00000000]          xsave   [storedata]    
    33                                  
    34                                      ; Parameters
    35 0000002C 4989FF                      mov     r15, rdi            ; An array of char with null termination expected
    36                                  
    37                                      ; Initialize for integer part conversion
    38 0000002F F24C0F2CE8                  cvttsd2si r13, xmm0         ; Convert float in xmm0 to integer part in r13
    39 00000034 41BC0A000000                mov     r12, 10             ; Set divisor for conversion
    40 0000003A 4D31F6                      xor     r14, r14            ; Clear remainder index for integer part
    41                                  parse_integer:
    42 0000003D 4831D2                      xor     rdx, rdx            ; Clear rdx to get the remainder
    43 00000040 49F7F4                      div     r12                 ; Divide r13 by 10, result in r13, remainder in rdx
    44 00000043 80C230                      add     dl, '0'             ; Convert remainder to ASCII
    45 00000046 43881437                    mov     [r15 + r14], dl     ; Store the character
    46 0000004A 49FFC6                      inc     r14                 ; Increment position in the buffer
    47 0000004D 4D85ED                      test    r13, r13            ; Check if quotient is zero
    48 00000050 75EB                        jnz     parse_integer       ; Continue if not zero
    49                                  
    50                                      ; Reverse the integer part (number is stored backwards in memory)
    51 00000052 4C89F3                      mov     rbx, r14            ; Store the length of integer part
    52 00000055 4831D2                      xor     rdx, rdx            ; Clear rdx for swapping
    53                                  reverse_integer:
    54 00000058 48FFCB                      dec     rbx
    55 0000005B 4839D3                      cmp     rbx, rdx
    56 0000005E 7C15                        jl      finish_integer
    57 00000060 418A041F                    mov     al, [r15 + rbx]
    58 00000064 418A1C17                    mov     bl, [r15 + rdx]
    59 00000068 41881C1F                    mov     [r15 + rbx], bl
    60 0000006C 41880417                    mov     [r15 + rdx], al
    61 00000070 48FFC2                      inc     rdx
    62 00000073 EBE3                        jmp     reverse_integer
    63                                  
    64                                  finish_integer:
    65                                  
    66                                      ; Process fractional part (after decimal point)
    67 00000075 F20F10C8                    movsd   xmm1, xmm0          ; Copy the original float
    68 00000079 F24C0F2CE9                  cvttsd2si r13, xmm1         ; Convert the integer part to r13
    69 0000007E F20F5CC8                    subsd   xmm1, xmm0          ; Subtract integer part to leave the fraction in xmm1
    70 00000082 41BC0A000000                mov     r12, 10             ; Set divisor for fractional conversion
    71                                  
    72                                      ; Add decimal point
    73 00000088 43C604372E                  mov     byte [r15 + r14], '.' ; Place the decimal point
    74 0000008D 49FFC6                      inc     r14                 ; Increment position in buffer
    75                                  
    76                                      ; Loop to convert fractional part
    77                                  parse_fraction:
    78 00000090 F20F59C9                    mulsd   xmm1, xmm1          ; Multiply fraction by 10
    79 00000094 F24C0F2CE9                  cvttsd2si r13, xmm1         ; Convert fractional part to integer
    80 00000099 4983C530                    add     r13, '0'            ; Convert to ASCII
    81 0000009D 4F892C37                    mov     [r15 + r14], r13    ; Store the character
    82 000000A1 49FFC6                      inc     r14                 ; Increment buffer position
    83                                      subsd   xmm1, r13           ; Subtract the integer part of the fraction
    83          ******************       error: invalid combination of opcode and operands
    84                                      cmp     xmm1, [zero]        ; Check if the fraction is small enough to stop
    84          ******************       error: symbol `zero' undefined
    85 000000A4 7FEA                        jg      parse_fraction      ; Continue if fraction is still non-zero
    86                                  
    87                                  finish_fraction:
    88                                  
    89                                      ; Null-terminate the string
    90 000000A6 43C6043700                  mov     byte [r15 + r14], 0  ; Null-terminate the string
    91                                  
    92                                      ; Return value
    93 000000AB B807000000                  mov     rax, 7
    94 000000B0 BA00000000                  mov     rdx, 0
    95 000000B5 0FAE2C25[00000000]          xrstor  [storedata]
    96                                  
    97                                      ; Restore registers
    98 000000BD 4C89FF                      mov     rdi, r15
    99 000000C0 F20F100424                  movsd   xmm0, [rsp]
   100 000000C5 58                          pop     rax
   101 000000C6 9D                          popf
   102 000000C7 415F                        pop     r15
   103 000000C9 415E                        pop     r14
   104 000000CB 415D                        pop     r13
   105 000000CD 415C                        pop     r12
   106 000000CF 415B                        pop     r11
   107 000000D1 415A                        pop     r10
   108 000000D3 4159                        pop     r9 
   109 000000D5 4158                        pop     r8 
   110 000000D7 5F                          pop     rdi
   111 000000D8 5E                          pop     rsi
   112 000000D9 5A                          pop     rdx
   113 000000DA 59                          pop     rcx
   114 000000DB 5B                          pop     rbx
   115 000000DC 5D                          pop     rbp
   116                                  
   117 000000DD C3                          ret
