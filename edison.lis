     1                                  STDIN equ 0       ; Standard input
     2                                  STDOUT equ 1       ; Standard output
     3                                  
     4                                  SYS_read equ 0     ; syscall number for read
     5                                  SYS_write equ 1    ; syscall number for write
     6                                  SYS_exit equ 60
     7                                  
     8                                  string_size equ 48
     9                                  
    10                                  %include "get_res.inc"
     1                              <1> ;****************************************************************************************************************************
     2                              <1> ; Program name: Non-deterministic Random Numbers
     3                              <1> ; This program generates up to 100 random numbers using the non-deterministic random number generator found inside modern 
     4                              <1> ; x86 microprocessors. The generated numbers are then normalized to the range 1.0 to 2.0 and sorted. 
     5                              <1> ; Copyright (C) 2025 Michelle Pham
     6                              <1> ;                                                                                                                         
     7                              <1> ; This file is part of the software program "Non-deterministic Random Numbers".                                    
     8                              <1> ; "Non-deterministic Random Numbers" is free software: you can redistribute it and/or modify it under the terms of    
     9                              <1> ; the GNU General Public License version 3 as published by the Free Software Foundation.                                  
    10                              <1> ; "Non-deterministic Random Numbers" is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;     
    11                              <1> ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public     
    12                              <1> ; License for more details. A copy of the GNU General Public License v3 is available here: <https://www.gnu.org/licenses/>.
    13                              <1> ;****************************************************************************************************************************
    14                              <1> 
    15                              <1> ;================================================================================================================================
    16                              <1> ;
    17                              <1> ; Author Information
    18                              <1> ;  Name: Michelle Pham
    19                              <1> ;  Email: mp28jam@csu.fullerton.edu
    20                              <1> ;  CWID: 867434789
    21                              <1> ;  Course: CPSC 240-03
    22                              <1> ;
    23                              <1> ; Program Information
    24                              <1> ;  Name: Non-deterministic Random Numbers
    25                              <1> ;  Programming Languages: x86-64 Assembly, C++
    26                              <1> ;  Effective Date: March 25, 2025
    27                              <1> ;  Latest Update: March 25, 2025
    28                              <1> ;  Date open source license added: March 25, 2025
    29                              <1> ;  Files: main.cpp, executive.asm, fill_random_array.asm, isnan.asm
    30                              <1> ;  Status: Incomplete
    31                              <1> ;  References Consulted: Ed Jorgensen, "x86-64 Assembly Language Programming with Ubuntu"
    32                              <1> ;  Future Upgrades: Implement advanced sorting algorithms and parallel number generation.
    33                              <1> ;
    34                              <1> ; Purpose
    35                              <1> ;  This program generates up to 100 random numbers using the non-deterministic random number generator (RDRAND) in modern x86 
    36                              <1> ;  microprocessors. The generated numbers are normalized to the range 1.0 to 2.0 and then sorted to produce an ordered list. The 
    37                              <1> ;  goal is to practice techniques for handling random number generation, normalization, and sorting in x86-64 assembly.
    38                              <1> ;
    39                              <1> ; Development Information
    40                              <1> ;  OS: Ubuntu 22.04.4 LTS
    41                              <1> ;  Text Editor: Visual Studio Code
    42                              <1> ;  Tools: NASM, G++ compiler, GDB
    43                              <1> ;
    44                              <1> ; Current File Information
    45                              <1> ;  Name: utilities.inc
    46                              <1> ;  Language: x86-64 Assembly with Intel syntax
    47                              <1> ;  An include file to store macros for this program.
    48                              <1> ;
    49                              <1> ;================================================================================================================================
    50                              <1> 
    51                              <1> ;Back-up GPRs
    52                              <1> %macro    backupGPRs 0
    53                              <1>   push    rbp
    54                              <1>   mov    rbp, rsp
    55                              <1>   push    rbx
    56                              <1>   push    rcx
    57                              <1>   push    rdx
    58                              <1>   push    rsi
    59                              <1>   push    rdi
    60                              <1>   push    r8
    61                              <1>   push    r9
    62                              <1>   push    r10
    63                              <1>   push    r11
    64                              <1>   push    r12
    65                              <1>   push    r13
    66                              <1>   push    r14
    67                              <1>   push    r15
    68                              <1>   pushf
    69                              <1> %endmacro
    70                              <1> 
    71                              <1> ;Restore GPRs
    72                              <1> %macro    restoreGPRs 0
    73                              <1>   popf
    74                              <1>   pop    r15
    75                              <1>   pop    r14
    76                              <1>   pop    r13
    77                              <1>   pop    r12
    78                              <1>   pop    r11
    79                              <1>   pop    r10
    80                              <1>   pop    r9
    81                              <1>   pop    r8
    82                              <1>   pop    rsi
    83                              <1>   pop    rdi
    84                              <1>   pop    rdx
    85                              <1>   pop    rcx
    86                              <1>   pop    rbx
    87                              <1>   pop    rbp
    88                              <1> %endmacro
    89                              <1> 
    90                              <1> %macro    backupNGPRs 1
    91                              <1>   mov    rax, 7
    92                              <1>   mov    rdx, 0
    93                              <1>   xsave    [%1]
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> %macro    restoreNGPRs 1
    97                              <1>   mov    rax, 7
    98                              <1>   mov    rdx, 0
    99                              <1>   xrstor    [%1]
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> 
   103                              <1> %macro GET_ARRAY_INPUT 3
   104                              <1>     ; %1 = destination array (e.g., arr)
   105                              <1>     ; %2 = number of elements (e.g., 3)
   106                              <1>     ; %3 = string buffer size (e.g., 32)
   107                              <1> 
   108                              <1>     xor    r15, r15             ; r15 = index
   109                              <1>     mov    r13, %1              ; r13 = base address of array
   110                              <1>     mov    r14, %2              ; r14 = number of elements
   111                              <1> 
   112                              <1> .loop_start:
   113                              <1>     cmp    r15, r14
   114                              <1>     jge    .loop_end
   115                              <1> 
   116                              <1> .loop_input:
   117                              <1>     xor    rax, rax             ; clear rax
   118                              <1>     push   qword 0              ; align stack (16-byte)
   119                              <1>     push   qword 0
   120                              <1> 
   121                              <1>     mov    rax, 0               ; syscall: SYS_read
   122                              <1>     mov    rdi, 0               ; STDIN
   123                              <1>     mov    rsi, rsp             ; buffer (top of stack)
   124                              <1>     mov    rdx, 32              ; buffer size (e.g., 32)
   125                              <1>     syscall
   126                              <1> 
   127                              <1>     cmp    eax, -1
   128                              <1>     je     .ctrl_d
   129                              <1> 
   130                              <1> 
   131                              <1>     mov     rcx, 0
   132                              <1> .loop_trim:
   133                              <1>     mov     al, byte [rsp + rcx]
   134                              <1>     cmp     al, 0
   135                              <1>     je      .done_trim
   136                              <1>     cmp     al, 10             ; newline?
   137                              <1>     jne     .not_newline
   138                              <1>     mov     byte [rsp + rcx], 0
   139                              <1>     jmp     .done_trim
   140                              <1> .not_newline:
   141                              <1>     inc     rcx
   142                              <1>     jmp     .loop_trim
   143                              <1> .done_trim:
   144                              <1> 
   145                              <1>     xor    rax, rax
   146                              <1>     mov    rdi, rsp
   147                              <1>     call   isfloat
   148                              <1>     cmp    rax, 0
   149                              <1>     je     .invalid_input
   150                              <1> 
   151                              <1>     ; Convert input string to float
   152                              <1>     xor    rax, rax
   153                              <1>     mov    rdi, rsp
   154                              <1>     call   atof
   155                              <1>     movsd  xmm15, xmm0
   156                              <1> 
   157                              <1>     ; Store into array
   158                              <1>     movsd [r13 + r15*8], xmm15
   159                              <1> 
   160                              <1>     inc    r15
   161                              <1> 
   162                              <1>     pop    rax
   163                              <1>     pop    rax
   164                              <1> 
   165                              <1>     jmp    .loop_start
   166                              <1> 
   167                              <1> .invalid_input:
   168                              <1>     pop    rax
   169                              <1>     pop    rax
   170                              <1> 
   171                              <1>     xor    rax, rax
   172                              <1>     mov    rax, 1               ; syscall: SYS_write
   173                              <1>     mov    rdi, 1               ; STDOUT
   174                              <1>     mov    rsi, prompt_input    ; prompt message address
   175                              <1>     mov    rdx, 27              ; length of prompt message
   176                              <1>     syscall
   177                              <1> 
   178                              <1>     jmp    .loop_input          ; retry input for the same index
   179                              <1> 
   180                              <1> .ctrl_d:
   181                              <1>     pop    rax
   182                              <1>     pop    rax
   183                              <1> 
   184                              <1> .loop_end:
   185                              <1>     mov    rax, r15   
   186                              <1> %endmacro
   187                              <1> 
   188                              <1> 
    11                                  extern isfloat
    12                                  extern atof
    13                                  extern tesla
    14                                  extern ftoa
    15                                  
    16                                  section .data
    17 00000000 506C6561736520656E-     name_prompt db "Please enter your full name: ", 0
    17 00000009 74657220796F757220-
    17 00000012 66756C6C206E616D65-
    17 0000001B 3A2000             
    18 0000001E 506C6561736520656E-     career_prompt db "Please enter the career path you are following: ", 0
    18 00000027 746572207468652063-
    18 00000030 617265657220706174-
    18 00000039 6820796F7520617265-
    18 00000042 20666F6C6C6F77696E-
    18 0000004B 673A2000           
    19 0000004F 5468616E6B20796F75-     thankyou0 db "Thank you. We appreciate all ", 0
    19 00000058 2E2057652061707072-
    19 00000061 65636961746520616C-
    19 0000006A 6C2000             
    20 0000006D 73                      thankyou db "s", 
    21 0000006E 0A                      newline db "", 10
    22                                  
    23 0000006F 596F75722063697263-     enter_resist      db "Your circuit has 3 sub-circuits. ", 10
    23 00000078 756974206861732033-
    23 00000081 207375622D63697263-
    23 0000008A 756974732E200A     
    24 00000091 506C6561736520656E-              db "Please enter the resistance in ohms on each of the three sub-circuits separated by ws.", 10, 0
    24 0000009A 746572207468652072-
    24 000000A3 6573697374616E6365-
    24 000000AC 20696E206F686D7320-
    24 000000B5 6F6E2065616368206F-
    24 000000BE 662074686520746872-
    24 000000C7 6565207375622D6369-
    24 000000D0 726375697473207365-
    24 000000D9 706172617465642062-
    24 000000E2 792077732E0A00     
    25                                  
    26 000000E9 5468616E6B20796F75-     total_resist db "Thank you.", 10
    26 000000F2 2E0A               
    27 000000F4 54686520746F74616C-              db "The total resistance of the full circuit is computed to be ", 0
    27 000000FD 20726573697374616E-
    27 00000106 6365206F6620746865-
    27 0000010F 2066756C6C20636972-
    27 00000118 637569742069732063-
    27 00000121 6F6D70757465642074-
    27 0000012A 6F2062652000       
    28                                           
    29 00000130 206F686D732E0A0A        emf_msg db " ohms.", 10, 10
    30 00000138 454D4620697320636F-             db "EMF is constant on every branch of any circuit.", 10
    30 00000141 6E7374616E74206F6E-
    30 0000014A 206576657279206272-
    30 00000153 616E6368206F662061-
    30 0000015C 6E7920636972637569-
    30 00000165 742E0A             
    31 00000168 506C6561736520656E-             db "Please enter the EMF of this circuit in volts: ", 0
    31 00000171 746572207468652045-
    31 0000017A 4D46206F6620746869-
    31 00000183 732063697263756974-
    31 0000018C 20696E20766F6C7473-
    31 00000195 3A2000             
    32                                  
    33 00000198 5468616E6B20796F75-     compute_current db "Thank you.", 10, 10
    33 000001A1 2E0A0A             
    34 000001A4 546865206375727265-                     db "The current flowing in this circuit has been computed: "
    34 000001AD 6E7420666C6F77696E-
    34 000001B6 6720696E2074686973-
    34 000001BF 206369726375697420-
    34 000001C8 686173206265656E20-
    34 000001D1 636F6D70757465643A-
    34 000001DA 20                 
    35 000001DB 616D70730A0A            last_thanks db "amps", 10, 10
    36 000001E1 5468616E6B20796F75-                 db "Thank you "
    36 000001EA 20                 
    37                                  
    38 000001EB 546865206C61737420-     prompt_input    db "The last input was invalid and not entered into the array. Try again:", 10, 0
    38 000001F4 696E70757420776173-
    38 000001FD 20696E76616C696420-
    38 00000206 616E64206E6F742065-
    38 0000020F 6E746572656420696E-
    38 00000218 746F20746865206172-
    38 00000221 7261792E2054727920-
    38 0000022A 616761696E3A0A00   
    39                                  
    40 00000232 257300                  float_format    db "%s", 0
    41 00000235 2E00                    decimal db ".", 0             
    42                                  
    43                                  
    44                                  section .bss
    45 00000000 <res 00000030>          user_name   resb string_size 
    46 00000030 <res 00000030>          career_path resb string_size
    47                                  ; resist_format resb 128
    48 00000060 <res 00000018>          arr         resq 3
    49 00000078 <res 00000014>          total_resistance resb 20
    50                                  
    51                                  section .text
    52                                  global edison
    53                                  edison:
    54                                  
    55                                      backupGPRs
    55 00000000 55                  <1>  push rbp
    55 00000001 4889E5              <1>  mov rbp, rsp
    55 00000004 53                  <1>  push rbx
    55 00000005 51                  <1>  push rcx
    55 00000006 52                  <1>  push rdx
    55 00000007 56                  <1>  push rsi
    55 00000008 57                  <1>  push rdi
    55 00000009 4150                <1>  push r8
    55 0000000B 4151                <1>  push r9
    55 0000000D 4152                <1>  push r10
    55 0000000F 4153                <1>  push r11
    55 00000011 4154                <1>  push r12
    55 00000013 4155                <1>  push r13
    55 00000015 4156                <1>  push r14
    55 00000017 4157                <1>  push r15
    55 00000019 9C                  <1>  pushf
    56                                      ; Print prompt for the user's full name
    57 0000001A B801000000                  mov rax, SYS_write  
    58 0000001F BF01000000                  mov rdi, STDOUT     
    59 00000024 48BE-                       mov rsi, name_prompt        
    59 00000026 [0000000000000000] 
    60 0000002E BA1C000000                  mov rdx, 28 
    61 00000033 0F05                        syscall   
    62                                  
    63                                      ; Take name input 
    64 00000035 B800000000                  mov rax, SYS_read
    65 0000003A BF00000000                  mov rdi, STDIN
    66 0000003F 48BE-                       mov rsi, user_name 
    66 00000041 [0000000000000000] 
    67 00000049 BA1C000000                  mov rdx, 28 ; read count
    68 0000004E 0F05                        syscall
    69                                  
    70                                      ; Print prompt for the career path
    71 00000050 B801000000                  mov rax, SYS_write  
    72 00000055 BF01000000                  mov rdi, STDOUT     
    73 0000005A 48BE-                       mov rsi, career_prompt        
    73 0000005C [1E00000000000000] 
    74 00000064 BA30000000                  mov rdx, 48 
    75 00000069 0F05                        syscall 
    76                                  
    77                                      ; Take career path input 
    78 0000006B B800000000                  mov rax, SYS_read
    79 00000070 BF00000000                  mov rdi, STDIN
    80 00000075 48BE-                       mov rsi, career_path 
    80 00000077 [3000000000000000] 
    81 0000007F BA30000000                  mov rdx, string_size ; read count
    82 00000084 0F05                        syscall
    83                                  
    84                                      ; Print prompt the first thank you
    85 00000086 B801000000                  mov rax, SYS_write  
    86 0000008B BF01000000                  mov rdi, STDOUT     
    87 00000090 48BE-                       mov rsi, thankyou0        
    87 00000092 [4F00000000000000] 
    88 0000009A BA1E000000                  mov rdx, 30 
    89 0000009F 0F05                        syscall 
    90                                  
    91                                      ; Print career path
    92 000000A1 B801000000                  mov rax, SYS_write  
    93 000000A6 BF01000000                  mov rdi, STDOUT     
    94 000000AB 48BE-                       mov rsi, career_path        
    94 000000AD [3000000000000000] 
    95 000000B5 BA14000000                  mov rdx, 20 
    96 000000BA 0F05                        syscall 
    97                                  
    98                                      ; Print newline
    99 000000BC B801000000                  mov rax, SYS_write  
   100 000000C1 BF01000000                  mov rdi, STDOUT     
   101 000000C6 48BE-                       mov rsi, newline        
   101 000000C8 [6E00000000000000] 
   102 000000D0 BA01000000                  mov rdx, 1 
   103 000000D5 0F05                        syscall 
   104                                  
   105                                      ; Print prompt for 3 resistance inputs
   106 000000D7 B801000000                  mov rax, SYS_write  
   107 000000DC BF01000000                  mov rdi, STDOUT     
   108 000000E1 48BE-                       mov rsi, enter_resist        
   108 000000E3 [6F00000000000000] 
   109 000000EB BA79000000                  mov rdx, 121 
   110 000000F0 0F05                        syscall 
   111                                  
   112                                  ; =========== TAKE INPUT ARRAY OF 3 RESISTANCES DONE ==============
   113 000000F2 B800000000                  mov rax, 0 
   114 000000F7 48BF-                       mov rdi, arr       ; array
   114 000000F9 [6000000000000000] 
   115 00000101 BE03000000                  mov rsi, 3         ; count
   116 00000106 BA20000000                  mov rdx, 32        ; string buffer size
   117                                      GET_ARRAY_INPUT rdi, rsi, rdx
   117                              <1> 
   117                              <1> 
   117                              <1> 
   117                              <1> 
   117 0000010B 4D31FF              <1>  xor r15, r15
   117 0000010E 4989FD              <1>  mov r13, %1
   117 00000111 4989F6              <1>  mov r14, %2
   117                              <1> 
   117                              <1> .loop_start:
   117 00000114 4D39F7              <1>  cmp r15, r14
   117 00000117 0F8D91000000        <1>  jge .loop_end
   117                              <1> 
   117                              <1> .loop_input:
   117 0000011D 4831C0              <1>  xor rax, rax
   117 00000120 6A00                <1>  push qword 0
   117 00000122 6A00                <1>  push qword 0
   117                              <1> 
   117 00000124 B800000000          <1>  mov rax, 0
   117 00000129 BF00000000          <1>  mov rdi, 0
   117 0000012E 4889E6              <1>  mov rsi, rsp
   117 00000131 BA20000000          <1>  mov rdx, 32
   117 00000136 0F05                <1>  syscall
   117                              <1> 
   117 00000138 83F8FF              <1>  cmp eax, -1
   117 0000013B 746F                <1>  je .ctrl_d
   117                              <1> 
   117                              <1> 
   117 0000013D B900000000          <1>  mov rcx, 0
   117                              <1> .loop_trim:
   117 00000142 8A040C              <1>  mov al, byte [rsp + rcx]
   117 00000145 3C00                <1>  cmp al, 0
   117 00000147 740F                <1>  je .done_trim
   117 00000149 3C0A                <1>  cmp al, 10
   117 0000014B 7506                <1>  jne .not_newline
   117 0000014D C6040C00            <1>  mov byte [rsp + rcx], 0
   117 00000151 EB05                <1>  jmp .done_trim
   117                              <1> .not_newline:
   117 00000153 48FFC1              <1>  inc rcx
   117 00000156 EBEA                <1>  jmp .loop_trim
   117                              <1> .done_trim:
   117                              <1> 
   117 00000158 4831C0              <1>  xor rax, rax
   117 0000015B 4889E7              <1>  mov rdi, rsp
   117 0000015E E8(00000000)        <1>  call isfloat
   117 00000163 4883F800            <1>  cmp rax, 0
   117 00000167 741E                <1>  je .invalid_input
   117                              <1> 
   117                              <1> 
   117 00000169 4831C0              <1>  xor rax, rax
   117 0000016C 4889E7              <1>  mov rdi, rsp
   117 0000016F E8(00000000)        <1>  call atof
   117 00000174 F2440F10F8          <1>  movsd xmm15, xmm0
   117                              <1> 
   117                              <1> 
   117 00000179 F2470F117CFD00      <1>  movsd [r13 + r15*8], xmm15
   117                              <1> 
   117 00000180 49FFC7              <1>  inc r15
   117                              <1> 
   117 00000183 58                  <1>  pop rax
   117 00000184 58                  <1>  pop rax
   117                              <1> 
   117 00000185 EB8D                <1>  jmp .loop_start
   117                              <1> 
   117                              <1> .invalid_input:
   117 00000187 58                  <1>  pop rax
   117 00000188 58                  <1>  pop rax
   117                              <1> 
   117 00000189 4831C0              <1>  xor rax, rax
   117 0000018C B801000000          <1>  mov rax, 1
   117 00000191 BF01000000          <1>  mov rdi, 1
   117 00000196 48BE-               <1>  mov rsi, prompt_input
   117 00000198 [EB01000000000000]  <1>
   117 000001A0 BA1B000000          <1>  mov rdx, 27
   117 000001A5 0F05                <1>  syscall
   117                              <1> 
   117 000001A7 E971FFFFFF          <1>  jmp .loop_input
   117                              <1> 
   117                              <1> .ctrl_d:
   117 000001AC 58                  <1>  pop rax
   117 000001AD 58                  <1>  pop rax
   117                              <1> 
   117                              <1> .loop_end:
   117 000001AE 4C89F8              <1>  mov rax, r15
   118                                  
   119                                      
   120                                  ; ; =========== CALL TESLA TO COMPUTE_RESISTANCE ==============
   121 000001B1 B800000000                  mov rax, 0 
   122 000001B6 48BF-                       mov rdi, arr
   122 000001B8 [6000000000000000] 
   123 000001C0 BE03000000                  mov rsi, 3
   124 000001C5 E8(00000000)                call tesla      
   125 000001CA E8(00000000)                call ftoa                ; convert float to string
   126                                  
   127                                  
   128                                  ; =======================
   129                                      ; Print total resistance
   130 000001CF B801000000                  mov rax, SYS_write  
   131 000001D4 BF01000000                  mov rdi, STDOUT     
   132 000001D9 48BE-                       mov rsi, total_resist        
   132 000001DB [E900000000000000] 
   133 000001E3 BA48000000                  mov rdx, 72
   134 000001E8 0F05                        syscall  
   135                                  
   136                                      ; mov rax, 1                    
   137                                      ; mov rdi, 1                    
   138                                      ; mov rsi, r14                  
   139                                      ; mov rdx, 10                   
   140                                      ; syscall
   141                                  
   142                                      ; mov rax, 1                
   143                                      ; mov rdi, 1                   
   144                                      ; mov rsi, decimal                   
   145                                      ; mov rdx, 1                   
   146                                      ; syscall           
   147                                  
   148                                      ; mov rax, 1                
   149                                      ; mov rdi, 1                   
   150                                      ; mov rsi, r12                   
   151                                      ; mov rdx, 10                   
   152                                      ; syscall
   153                                  
   154                                  
   155                                  ; =========== PRINT TOTAL RESISTANCE ==============
   156                                      
   157                                  
   158 000001EA B801000000                  mov rax, SYS_write  
   159 000001EF BF01000000                  mov rdi, STDOUT     
   160 000001F4 48BE-                       mov rsi, total_resistance       
   160 000001F6 [7800000000000000] 
   161 000001FE BA19000000                  mov rdx, 25
   162 00000203 0F05                        syscall 
   163                                  
   164                                  
   165                                  ;     ; Print prompt for user to enter the EMF
   166                                  ;     mov rax, SYS_write  
   167                                  ;     mov rdi, STDOUT     
   168                                  ;     mov rsi, emf_msg        
   169                                  ;     mov rdx, 103
   170                                  ;     syscall 
   171                                  
   172                                  ; ; =========== TAKE INPUT FOR EMF ==============
   173                                  
   174                                  ;     ; Print current
   175                                  ;     mov rax, SYS_write  
   176                                  ;     mov rdi, STDOUT     
   177                                  ;     mov rsi, compute_current        
   178                                  ;     mov rdx, 67 
   179                                  ;     syscall 
   180                                  
   181                                  ; =========== CALL TESLA TO COMPUTE_CURRENT ==============
   182                                  ; =========== PRINT COMPUTED VALUE ==============
   183                                  
   184                                      ; Print the last thanks
   185                                      ; mov rax, SYS_write  
   186                                      ; mov rdi, STDOUT     
   187                                      ; mov rsi, last_thanks        
   188                                      ; mov rdx, 16 
   189                                      ; syscall     
   190                                  
   191                                      ; ; Print the user's name
   192                                      ; mov rax, SYS_write  
   193                                      ; mov rdi, STDOUT     
   194                                      ; mov rsi, user_name        
   195                                      ; mov rdx, 16 
   196                                      ; syscall 
   197                                  ; =========== PRINT REST OF THE MESSAGE ==============
   198                                      restoreGPRs
   198 00000205 9D                  <1>  popf
   198 00000206 415F                <1>  pop r15
   198 00000208 415E                <1>  pop r14
   198 0000020A 415D                <1>  pop r13
   198 0000020C 415C                <1>  pop r12
   198 0000020E 415B                <1>  pop r11
   198 00000210 415A                <1>  pop r10
   198 00000212 4159                <1>  pop r9
   198 00000214 4158                <1>  pop r8
   198 00000216 5E                  <1>  pop rsi
   198 00000217 5F                  <1>  pop rdi
   198 00000218 5A                  <1>  pop rdx
   198 00000219 59                  <1>  pop rcx
   198 0000021A 5B                  <1>  pop rbx
   198 0000021B 5D                  <1>  pop rbp
   199 0000021C C3                          ret
