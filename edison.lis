     1                                  STDIN equ 0       ; Standard input
     2                                  STDOUT equ 1       ; Standard output
     3                                  
     4                                  SYS_read equ 0     ; syscall number for read
     5                                  SYS_write equ 1    ; syscall number for write
     6                                  SYS_exit equ 60
     7                                  
     8                                  string_size equ 48
     9                                  
    10                                  %include "get_res.inc"
     1                              <1> ;****************************************************************************************************************************
     2                              <1> ; Program name: Non-deterministic Random Numbers
     3                              <1> ; This program generates up to 100 random numbers using the non-deterministic random number generator found inside modern 
     4                              <1> ; x86 microprocessors. The generated numbers are then normalized to the range 1.0 to 2.0 and sorted. 
     5                              <1> ; Copyright (C) 2025 Michelle Pham
     6                              <1> ;                                                                                                                         
     7                              <1> ; This file is part of the software program "Non-deterministic Random Numbers".                                    
     8                              <1> ; "Non-deterministic Random Numbers" is free software: you can redistribute it and/or modify it under the terms of    
     9                              <1> ; the GNU General Public License version 3 as published by the Free Software Foundation.                                  
    10                              <1> ; "Non-deterministic Random Numbers" is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;     
    11                              <1> ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public     
    12                              <1> ; License for more details. A copy of the GNU General Public License v3 is available here: <https://www.gnu.org/licenses/>.
    13                              <1> ;****************************************************************************************************************************
    14                              <1> 
    15                              <1> ;================================================================================================================================
    16                              <1> ;
    17                              <1> ; Author Information
    18                              <1> ;  Name: Michelle Pham
    19                              <1> ;  Email: mp28jam@csu.fullerton.edu
    20                              <1> ;  CWID: 867434789
    21                              <1> ;  Course: CPSC 240-03
    22                              <1> ;
    23                              <1> ; Program Information
    24                              <1> ;  Name: Non-deterministic Random Numbers
    25                              <1> ;  Programming Languages: x86-64 Assembly, C++
    26                              <1> ;  Effective Date: March 25, 2025
    27                              <1> ;  Latest Update: March 25, 2025
    28                              <1> ;  Date open source license added: March 25, 2025
    29                              <1> ;  Files: main.cpp, executive.asm, fill_random_array.asm, isnan.asm
    30                              <1> ;  Status: Incomplete
    31                              <1> ;  References Consulted: Ed Jorgensen, "x86-64 Assembly Language Programming with Ubuntu"
    32                              <1> ;  Future Upgrades: Implement advanced sorting algorithms and parallel number generation.
    33                              <1> ;
    34                              <1> ; Purpose
    35                              <1> ;  This program generates up to 100 random numbers using the non-deterministic random number generator (RDRAND) in modern x86 
    36                              <1> ;  microprocessors. The generated numbers are normalized to the range 1.0 to 2.0 and then sorted to produce an ordered list. The 
    37                              <1> ;  goal is to practice techniques for handling random number generation, normalization, and sorting in x86-64 assembly.
    38                              <1> ;
    39                              <1> ; Development Information
    40                              <1> ;  OS: Ubuntu 22.04.4 LTS
    41                              <1> ;  Text Editor: Visual Studio Code
    42                              <1> ;  Tools: NASM, G++ compiler, GDB
    43                              <1> ;
    44                              <1> ; Current File Information
    45                              <1> ;  Name: utilities.inc
    46                              <1> ;  Language: x86-64 Assembly with Intel syntax
    47                              <1> ;  An include file to store macros for this program.
    48                              <1> ;
    49                              <1> ;================================================================================================================================
    50                              <1> 
    51                              <1> ;Declarations
    52                              <1> ;Back-up GPRs
    53                              <1> %macro    backupGPRs 0
    54                              <1>   push    rbp
    55                              <1>   mov    rbp, rsp
    56                              <1>   push    rbx
    57                              <1>   push    rcx
    58                              <1>   push    rdx
    59                              <1>   push    rsi
    60                              <1>   push    rdi
    61                              <1>   push    r8
    62                              <1>   push    r9
    63                              <1>   push    r10
    64                              <1>   push    r11
    65                              <1>   push    r12
    66                              <1>   push    r13
    67                              <1>   push    r14
    68                              <1>   push    r15
    69                              <1>   pushf
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> ;Restore GPRs
    73                              <1> %macro    restoreGPRs 0
    74                              <1>   popf
    75                              <1>   pop    r15
    76                              <1>   pop    r14
    77                              <1>   pop    r13
    78                              <1>   pop    r12
    79                              <1>   pop    r11
    80                              <1>   pop    r10
    81                              <1>   pop    r9
    82                              <1>   pop    r8
    83                              <1>   pop    rsi
    84                              <1>   pop    rdi
    85                              <1>   pop    rdx
    86                              <1>   pop    rcx
    87                              <1>   pop    rbx
    88                              <1>   pop    rbp
    89                              <1> %endmacro
    90                              <1> 
    91                              <1> %macro    backupNGPRs 1
    92                              <1>   mov    rax, 7
    93                              <1>   mov    rdx, 0
    94                              <1>   xsave    [%1]
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> %macro    restoreNGPRs 1
    98                              <1>   mov    rax, 7
    99                              <1>   mov    rdx, 0
   100                              <1>   xrstor    [%1]
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;Print out author information and calculate the area using Huron's formula
   104                              <1> %macro    authorInfo 0
   105                              <1>   mov    rax, 0
   106                              <1>   mov    rdi, author_info
   107                              <1>   call    printf
   108                              <1> %endmacro
    11                                  extern isfloat
    12                                  extern atof
    13                                  
    14                                  section .data
    15 00000000 506C6561736520656E-     name_prompt db "Please enter your full name: ", 0
    15 00000009 74657220796F757220-
    15 00000012 66756C6C206E616D65-
    15 0000001B 3A2000             
    16 0000001E 506C6561736520656E-     career_prompt db "Please enter the career path you are following: ", 0
    16 00000027 746572207468652063-
    16 00000030 617265657220706174-
    16 00000039 6820796F7520617265-
    16 00000042 20666F6C6C6F77696E-
    16 0000004B 673A2000           
    17 0000004F 5468616E6B20796F75-     thankyou0 db "Thank you. We appreciate all ", 0
    17 00000058 2E2057652061707072-
    17 00000061 65636961746520616C-
    17 0000006A 6C2000             
    18 0000006D 73                      thankyou db "s", 
    19 0000006E 0A                      newline db "", 10
    20                                  
    21 0000006F 596F75722063697263-     enter_resist      db "Your circuit has 3 sub-circuits. ", 10
    21 00000078 756974206861732033-
    21 00000081 207375622D63697263-
    21 0000008A 756974732E200A     
    22 00000091 506C6561736520656E-              db "Please enter the resistance in ohms on each of the three sub-circuits separated by ws.", 10, 0
    22 0000009A 746572207468652072-
    22 000000A3 6573697374616E6365-
    22 000000AC 20696E206F686D7320-
    22 000000B5 6F6E2065616368206F-
    22 000000BE 662074686520746872-
    22 000000C7 6565207375622D6369-
    22 000000D0 726375697473207365-
    22 000000D9 706172617465642062-
    22 000000E2 792077732E0A00     
    23                                  
    24 000000E9 5468616E6B20796F75-     total_resist db "Thank you.", 10
    24 000000F2 2E0A               
    25 000000F4 54686520746F74616C-              db "The total resistance of the full circuit is computed to be ", 0
    25 000000FD 20726573697374616E-
    25 00000106 6365206F6620746865-
    25 0000010F 2066756C6C20636972-
    25 00000118 637569742069732063-
    25 00000121 6F6D70757465642074-
    25 0000012A 6F2062652000       
    26                                           
    27 00000130 206F686D732E0A0A        emf_msg db " ohms.", 10, 10
    28 00000138 454D4620697320636F-             db "EMF is constant on every branch of any circuit.", 10
    28 00000141 6E7374616E74206F6E-
    28 0000014A 206576657279206272-
    28 00000153 616E6368206F662061-
    28 0000015C 6E7920636972637569-
    28 00000165 742E0A             
    29 00000168 506C6561736520656E-             db "Please enter the EMF of this circuit in volts: ", 0
    29 00000171 746572207468652045-
    29 0000017A 4D46206F6620746869-
    29 00000183 732063697263756974-
    29 0000018C 20696E20766F6C7473-
    29 00000195 3A2000             
    30                                  
    31 00000198 5468616E6B20796F75-     compute_current db "Thank you.", 10, 10
    31 000001A1 2E0A0A             
    32 000001A4 546865206375727265-                     db "The current flowing in this circuit has been computed: "
    32 000001AD 6E7420666C6F77696E-
    32 000001B6 6720696E2074686973-
    32 000001BF 206369726375697420-
    32 000001C8 686173206265656E20-
    32 000001D1 636F6D70757465643A-
    32 000001DA 20                 
    33 000001DB 616D70730A0A            last_thanks db "amps", 10, 10
    34 000001E1 5468616E6B20796F75-                 db "Thank you "
    34 000001EA 20                 
    35                                  
    36 000001EB 257300                  float_format    db "%s", 0
    37                                  
    38                                  
    39                                  section .bss
    40 00000000 <res 00000030>          user_name   resb string_size 
    41 00000030 <res 00000030>          career_path resb string_size
    42                                  ; resist_format resb 128
    43 00000060 <res 00000018>          arr         resq 3
    44 00000078 <res 0000000A>          total_resistance resb 10
    45                                  
    46                                  section .text
    47                                  global edison
    48                                  edison:
    49                                  
    50                                      backupGPRs
    50 00000000 55                  <1>  push rbp
    50 00000001 4889E5              <1>  mov rbp, rsp
    50 00000004 53                  <1>  push rbx
    50 00000005 51                  <1>  push rcx
    50 00000006 52                  <1>  push rdx
    50 00000007 56                  <1>  push rsi
    50 00000008 57                  <1>  push rdi
    50 00000009 4150                <1>  push r8
    50 0000000B 4151                <1>  push r9
    50 0000000D 4152                <1>  push r10
    50 0000000F 4153                <1>  push r11
    50 00000011 4154                <1>  push r12
    50 00000013 4155                <1>  push r13
    50 00000015 4156                <1>  push r14
    50 00000017 4157                <1>  push r15
    50 00000019 9C                  <1>  pushf
    51                                      ; Print prompt for the user's full name
    52 0000001A B801000000                  mov rax, SYS_write  
    53 0000001F BF01000000                  mov rdi, STDOUT     
    54 00000024 48BE-                       mov rsi, name_prompt        
    54 00000026 [0000000000000000] 
    55 0000002E BA1C000000                  mov rdx, 28 
    56 00000033 0F05                        syscall   
    57                                  
    58                                      ; Take name input 
    59 00000035 B800000000                  mov rax, SYS_read
    60 0000003A BF00000000                  mov rdi, STDIN
    61 0000003F 48BE-                       mov rsi, user_name 
    61 00000041 [0000000000000000] 
    62 00000049 BA1C000000                  mov rdx, 28 ; read count
    63 0000004E 0F05                        syscall
    64                                  
    65                                      ; Print prompt for the career path
    66 00000050 B801000000                  mov rax, SYS_write  
    67 00000055 BF01000000                  mov rdi, STDOUT     
    68 0000005A 48BE-                       mov rsi, career_prompt        
    68 0000005C [1E00000000000000] 
    69 00000064 BA30000000                  mov rdx, 48 
    70 00000069 0F05                        syscall 
    71                                  
    72                                      ; Take career path input 
    73 0000006B B800000000                  mov rax, SYS_read
    74 00000070 BF00000000                  mov rdi, STDIN
    75 00000075 48BE-                       mov rsi, career_path 
    75 00000077 [3000000000000000] 
    76 0000007F BA30000000                  mov rdx, string_size ; read count
    77 00000084 0F05                        syscall
    78                                  
    79                                      ; Print prompt the first thank you
    80 00000086 B801000000                  mov rax, SYS_write  
    81 0000008B BF01000000                  mov rdi, STDOUT     
    82 00000090 48BE-                       mov rsi, thankyou0        
    82 00000092 [4F00000000000000] 
    83 0000009A BA1E000000                  mov rdx, 30 
    84 0000009F 0F05                        syscall 
    85                                  
    86                                      ; Print career path
    87 000000A1 B801000000                  mov rax, SYS_write  
    88 000000A6 BF01000000                  mov rdi, STDOUT     
    89 000000AB 48BE-                       mov rsi, career_path        
    89 000000AD [3000000000000000] 
    90 000000B5 BA14000000                  mov rdx, 20 
    91 000000BA 0F05                        syscall 
    92                                  
    93                                      ; Print newline
    94 000000BC B801000000                  mov rax, SYS_write  
    95 000000C1 BF01000000                  mov rdi, STDOUT     
    96 000000C6 48BE-                       mov rsi, newline        
    96 000000C8 [6E00000000000000] 
    97 000000D0 BA01000000                  mov rdx, 1 
    98 000000D5 0F05                        syscall 
    99                                  
   100                                      ; Print prompt for 3 resistance inputs
   101 000000D7 B801000000                  mov rax, SYS_write  
   102 000000DC BF01000000                  mov rdi, STDOUT     
   103 000000E1 48BE-                       mov rsi, enter_resist        
   103 000000E3 [6F00000000000000] 
   104 000000EB BA79000000                  mov rdx, 121 
   105 000000F0 0F05                        syscall 
   106                                  
   107                                  ; =========== TAKE INPUT ARRAY OF 3 RESISTANCES ==============
   108 000000F2 B800000000                  mov    rax, 0  
   109 000000F7 48BF-                       mov    rdi, arr     ; rdi will hold the array
   109 000000F9 [6000000000000000] 
   110 00000101 BE03000000                  mov    rsi, 3      ; rsi holds # of cells in array
   111 00000106 4D31FF                      xor    r15, r15     ; set r15 = 0
   112                                  
   113 00000109 4989FD                      mov    r13, rdi
   114 0000010C 4989F6                      mov    r14, rsi    ;r14 holds the number of cells in the array, r10
   115                                  
   116                                  ;===========
   117                                  loop_start:
   118 0000010F 4D39F7                      cmp r15, r14
   119 00000112 7D38                        jge loop_end ; jump if r15 is greater than rsi
   120                                  
   121 00000114 6A00                        push    qword 0    ;need two pushes, two pops since extern functions like scanf needs 16bit
   122 00000116 6A00                        push    qword 0
   123 00000118 B800000000                  mov    rax, SYS_read
   124 0000011D BF00000000                  mov    rdi, STDIN
   125 00000122 4889E6                      mov    rsi, rsp
   126 00000125 BA30000000                  mov rdx, string_size ; read count
   127 0000012A 0F05                        syscall
   128                                  
   129                                      ; Convert the inputted string into a real double.
   130 0000012C B800000000                  mov    rax, 0
   131 00000131 4889E7                      mov    rdi, rsp
   132 00000134 E8(00000000)                call    atof
   133 00000139 F2440F10F8                  movsd    xmm15, xmm0
   134                                  
   135 0000013E F2470F117CFD00              movsd    qword[r13+8*r15], xmm15
   136                                  
   137 00000145 49FFC7                      inc    r15
   138                                  
   139 00000148 58                          pop    rax
   140 00000149 58                          pop    rax
   141                                  
   142 0000014A EBC3                        jmp    loop_start
   143                                  
   144                                  loop_end:
   145 0000014C 4C89F8                      mov    rax, r15
   146 0000014F 4989C7                      mov    r15, rax
   147                                      
   148                                  ; =========== CALL TESLA TO COMPUTE_RESISTANCE ==============
   149                                      ; mov rax, 0 
   150                                      ; mov rdi, arr
   151                                      ; mov, rsi 3
   152                                      ; call tesla
   153                                  
   154                                  
   155                                  ; =======================
   156                                      ; Print total resistance
   157 00000152 B801000000                  mov rax, SYS_write  
   158 00000157 BF01000000                  mov rdi, STDOUT     
   159 0000015C 48BE-                       mov rsi, total_resist        
   159 0000015E [E900000000000000] 
   160 00000166 BA4E000000                  mov rdx, 78
   161 0000016B 0F05                        syscall 
   162                                  
   163                                  
   164                                  ; =========== PRINT TOTAL RESISTANCE ==============
   165                                  
   166                                  
   167                                  ;     ; Print prompt for user to enter the EMF
   168                                  ;     mov rax, SYS_write  
   169                                  ;     mov rdi, STDOUT     
   170                                  ;     mov rsi, emf_msg        
   171                                  ;     mov rdx, 103
   172                                  ;     syscall 
   173                                  
   174                                  ; ; =========== TAKE INPUT FOR EMF ==============
   175                                  
   176                                  ;     ; Print current
   177                                  ;     mov rax, SYS_write  
   178                                  ;     mov rdi, STDOUT     
   179                                  ;     mov rsi, compute_current        
   180                                  ;     mov rdx, 67 
   181                                  ;     syscall 
   182                                  
   183                                  ; =========== CALL TESLA TO COMPUTE_CURRENT ==============
   184                                  ; =========== PRINT COMPUTED VALUE ==============
   185                                  
   186                                      ; Print the last thanks
   187                                      ; mov rax, SYS_write  
   188                                      ; mov rdi, STDOUT     
   189                                      ; mov rsi, last_thanks        
   190                                      ; mov rdx, 16 
   191                                      ; syscall     
   192                                  
   193                                      ; ; Print the user's name
   194                                      ; mov rax, SYS_write  
   195                                      ; mov rdi, STDOUT     
   196                                      ; mov rsi, user_name        
   197                                      ; mov rdx, 16 
   198                                      ; syscall 
   199                                  ; =========== PRINT REST OF THE MESSAGE ==============
   200                                      restoreGPRs
   200 0000016D 9D                  <1>  popf
   200 0000016E 415F                <1>  pop r15
   200 00000170 415E                <1>  pop r14
   200 00000172 415D                <1>  pop r13
   200 00000174 415C                <1>  pop r12
   200 00000176 415B                <1>  pop r11
   200 00000178 415A                <1>  pop r10
   200 0000017A 4159                <1>  pop r9
   200 0000017C 4158                <1>  pop r8
   200 0000017E 5E                  <1>  pop rsi
   200 0000017F 5F                  <1>  pop rdi
   200 00000180 5A                  <1>  pop rdx
   200 00000181 59                  <1>  pop rcx
   200 00000182 5B                  <1>  pop rbx
   200 00000183 5D                  <1>  pop rbp
   201 00000184 C3                          ret
