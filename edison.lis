     1                                  STDIN equ 0       ; Standard input
     2                                  STDOUT equ 1       ; Standard output
     3                                  
     4                                  SYS_read equ 0     ; syscall number for read
     5                                  SYS_write equ 1    ; syscall number for write
     6                                  SYS_exit equ 60
     7                                  
     8                                  string_size equ 48
     9                                  
    10                                  %include "get_res.inc"
     1                              <1> ;****************************************************************************************************************************
     2                              <1> ; Program name: Non-deterministic Random Numbers
     3                              <1> ; This program generates up to 100 random numbers using the non-deterministic random number generator found inside modern 
     4                              <1> ; x86 microprocessors. The generated numbers are then normalized to the range 1.0 to 2.0 and sorted. 
     5                              <1> ; Copyright (C) 2025 Michelle Pham
     6                              <1> ;                                                                                                                         
     7                              <1> ; This file is part of the software program "Non-deterministic Random Numbers".                                    
     8                              <1> ; "Non-deterministic Random Numbers" is free software: you can redistribute it and/or modify it under the terms of    
     9                              <1> ; the GNU General Public License version 3 as published by the Free Software Foundation.                                  
    10                              <1> ; "Non-deterministic Random Numbers" is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;     
    11                              <1> ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public     
    12                              <1> ; License for more details. A copy of the GNU General Public License v3 is available here: <https://www.gnu.org/licenses/>.
    13                              <1> ;****************************************************************************************************************************
    14                              <1> 
    15                              <1> ;================================================================================================================================
    16                              <1> ;
    17                              <1> ; Author Information
    18                              <1> ;  Name: Michelle Pham
    19                              <1> ;  Email: mp28jam@csu.fullerton.edu
    20                              <1> ;  CWID: 867434789
    21                              <1> ;  Course: CPSC 240-03
    22                              <1> ;
    23                              <1> ; Program Information
    24                              <1> ;  Name: Non-deterministic Random Numbers
    25                              <1> ;  Programming Languages: x86-64 Assembly, C++
    26                              <1> ;  Effective Date: March 25, 2025
    27                              <1> ;  Latest Update: March 25, 2025
    28                              <1> ;  Date open source license added: March 25, 2025
    29                              <1> ;  Files: main.cpp, executive.asm, fill_random_array.asm, isnan.asm
    30                              <1> ;  Status: Incomplete
    31                              <1> ;  References Consulted: Ed Jorgensen, "x86-64 Assembly Language Programming with Ubuntu"
    32                              <1> ;  Future Upgrades: Implement advanced sorting algorithms and parallel number generation.
    33                              <1> ;
    34                              <1> ; Purpose
    35                              <1> ;  This program generates up to 100 random numbers using the non-deterministic random number generator (RDRAND) in modern x86 
    36                              <1> ;  microprocessors. The generated numbers are normalized to the range 1.0 to 2.0 and then sorted to produce an ordered list. The 
    37                              <1> ;  goal is to practice techniques for handling random number generation, normalization, and sorting in x86-64 assembly.
    38                              <1> ;
    39                              <1> ; Development Information
    40                              <1> ;  OS: Ubuntu 22.04.4 LTS
    41                              <1> ;  Text Editor: Visual Studio Code
    42                              <1> ;  Tools: NASM, G++ compiler, GDB
    43                              <1> ;
    44                              <1> ; Current File Information
    45                              <1> ;  Name: utilities.inc
    46                              <1> ;  Language: x86-64 Assembly with Intel syntax
    47                              <1> ;  An include file to store macros for this program.
    48                              <1> ;
    49                              <1> ;================================================================================================================================
    50                              <1> 
    51                              <1> ;Back-up GPRs
    52                              <1> %macro    backupGPRs 0
    53                              <1>   push    rbp
    54                              <1>   mov    rbp, rsp
    55                              <1>   push    rbx
    56                              <1>   push    rcx
    57                              <1>   push    rdx
    58                              <1>   push    rsi
    59                              <1>   push    rdi
    60                              <1>   push    r8
    61                              <1>   push    r9
    62                              <1>   push    r10
    63                              <1>   push    r11
    64                              <1>   push    r12
    65                              <1>   push    r13
    66                              <1>   push    r14
    67                              <1>   push    r15
    68                              <1>   pushf
    69                              <1> %endmacro
    70                              <1> 
    71                              <1> ;Restore GPRs
    72                              <1> %macro    restoreGPRs 0
    73                              <1>   popf
    74                              <1>   pop    r15
    75                              <1>   pop    r14
    76                              <1>   pop    r13
    77                              <1>   pop    r12
    78                              <1>   pop    r11
    79                              <1>   pop    r10
    80                              <1>   pop    r9
    81                              <1>   pop    r8
    82                              <1>   pop    rsi
    83                              <1>   pop    rdi
    84                              <1>   pop    rdx
    85                              <1>   pop    rcx
    86                              <1>   pop    rbx
    87                              <1>   pop    rbp
    88                              <1> %endmacro
    89                              <1> 
    90                              <1> %macro    backupNGPRs 1
    91                              <1>   mov    rax, 7
    92                              <1>   mov    rdx, 0
    93                              <1>   xsave    [%1]
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> %macro    restoreNGPRs 1
    97                              <1>   mov    rax, 7
    98                              <1>   mov    rdx, 0
    99                              <1>   xrstor    [%1]
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;Print out author information and calculate the area using Huron's formula
   103                              <1> %macro    authorInfo 0
   104                              <1>   mov    rax, 0
   105                              <1>   mov    rdi, author_info
   106                              <1>   call    printf
   107                              <1> %endmacro
   108                              <1> 
   109                              <1> 
   110                              <1> %macro GET_ARRAY_INPUT 3
   111                              <1>     ; %1 = destination array (e.g., arr)
   112                              <1>     ; %2 = number of elements (e.g., 3)
   113                              <1>     ; %3 = string buffer size (e.g., 32)
   114                              <1> 
   115                              <1>     xor    r15, r15             ; r15 = index
   116                              <1>     mov    r13, %1              ; r13 = base address of array
   117                              <1>     mov    r14, %2              ; r14 = number of elements
   118                              <1> 
   119                              <1> .loop_start:
   120                              <1>     cmp    r15, r14
   121                              <1>     jge    .loop_end
   122                              <1> 
   123                              <1>     push   qword 0              ; align stack for scanf (16-byte)
   124                              <1>     push   qword 0
   125                              <1> 
   126                              <1>     mov    rax, 0               ; syscall: SYS_read (0)
   127                              <1>     mov    rdi, 0               ; STDIN
   128                              <1>     mov    rsi, rsp             ; buffer (top of stack)
   129                              <1>     mov    rdx, %3              ; buffer size (e.g., 32)
   130                              <1>     syscall
   131                              <1> 
   132                              <1>     ; Convert input string to double
   133                              <1>     mov    rax, 0
   134                              <1>     mov    rdi, rsp
   135                              <1>     call   atof
   136                              <1>     movsd  xmm15, xmm0
   137                              <1> 
   138                              <1>     ; Store into array
   139                              <1>     movsd  qword [r13 + r15*8], xmm15
   140                              <1> 
   141                              <1>     inc    r15
   142                              <1> 
   143                              <1>     pop    rax
   144                              <1>     pop    rax
   145                              <1> 
   146                              <1>     jmp    .loop_start
   147                              <1> 
   148                              <1> .loop_end:
   149                              <1> %endmacro
    11                                  extern isfloat
    12                                  extern atof
    13                                  extern tesla
    14                                  extern ftoa
    15                                  
    16                                  section .data
    17 00000000 506C6561736520656E-     name_prompt db "Please enter your full name: ", 0
    17 00000009 74657220796F757220-
    17 00000012 66756C6C206E616D65-
    17 0000001B 3A2000             
    18 0000001E 506C6561736520656E-     career_prompt db "Please enter the career path you are following: ", 0
    18 00000027 746572207468652063-
    18 00000030 617265657220706174-
    18 00000039 6820796F7520617265-
    18 00000042 20666F6C6C6F77696E-
    18 0000004B 673A2000           
    19 0000004F 5468616E6B20796F75-     thankyou0 db "Thank you. We appreciate all ", 0
    19 00000058 2E2057652061707072-
    19 00000061 65636961746520616C-
    19 0000006A 6C2000             
    20 0000006D 73                      thankyou db "s", 
    21 0000006E 0A                      newline db "", 10
    22                                  
    23 0000006F 596F75722063697263-     enter_resist      db "Your circuit has 3 sub-circuits. ", 10
    23 00000078 756974206861732033-
    23 00000081 207375622D63697263-
    23 0000008A 756974732E200A     
    24 00000091 506C6561736520656E-              db "Please enter the resistance in ohms on each of the three sub-circuits separated by ws.", 10, 0
    24 0000009A 746572207468652072-
    24 000000A3 6573697374616E6365-
    24 000000AC 20696E206F686D7320-
    24 000000B5 6F6E2065616368206F-
    24 000000BE 662074686520746872-
    24 000000C7 6565207375622D6369-
    24 000000D0 726375697473207365-
    24 000000D9 706172617465642062-
    24 000000E2 792077732E0A00     
    25                                  
    26 000000E9 5468616E6B20796F75-     total_resist db "Thank you.", 10
    26 000000F2 2E0A               
    27 000000F4 54686520746F74616C-              db "The total resistance of the full circuit is computed to be ", 0
    27 000000FD 20726573697374616E-
    27 00000106 6365206F6620746865-
    27 0000010F 2066756C6C20636972-
    27 00000118 637569742069732063-
    27 00000121 6F6D70757465642074-
    27 0000012A 6F2062652000       
    28                                           
    29 00000130 206F686D732E0A0A        emf_msg db " ohms.", 10, 10
    30 00000138 454D4620697320636F-             db "EMF is constant on every branch of any circuit.", 10
    30 00000141 6E7374616E74206F6E-
    30 0000014A 206576657279206272-
    30 00000153 616E6368206F662061-
    30 0000015C 6E7920636972637569-
    30 00000165 742E0A             
    31 00000168 506C6561736520656E-             db "Please enter the EMF of this circuit in volts: ", 0
    31 00000171 746572207468652045-
    31 0000017A 4D46206F6620746869-
    31 00000183 732063697263756974-
    31 0000018C 20696E20766F6C7473-
    31 00000195 3A2000             
    32                                  
    33 00000198 5468616E6B20796F75-     compute_current db "Thank you.", 10, 10
    33 000001A1 2E0A0A             
    34 000001A4 546865206375727265-                     db "The current flowing in this circuit has been computed: "
    34 000001AD 6E7420666C6F77696E-
    34 000001B6 6720696E2074686973-
    34 000001BF 206369726375697420-
    34 000001C8 686173206265656E20-
    34 000001D1 636F6D70757465643A-
    34 000001DA 20                 
    35 000001DB 616D70730A0A            last_thanks db "amps", 10, 10
    36 000001E1 5468616E6B20796F75-                 db "Thank you "
    36 000001EA 20                 
    37                                  
    38 000001EB 257300                  float_format    db "%s", 0
    39 000001EE 2E00                    decimal db ".", 0             
    40                                  
    41                                  
    42                                  section .bss
    43 00000000 <res 00000030>          user_name   resb string_size 
    44 00000030 <res 00000030>          career_path resb string_size
    45                                  ; resist_format resb 128
    46 00000060 <res 00000018>          arr         resq 3
    47 00000078 <res 00000014>          total_resistance resb 20
    48                                  
    49                                  section .text
    50                                  global edison
    51                                  edison:
    52                                  
    53                                      backupGPRs
    53 00000000 55                  <1>  push rbp
    53 00000001 4889E5              <1>  mov rbp, rsp
    53 00000004 53                  <1>  push rbx
    53 00000005 51                  <1>  push rcx
    53 00000006 52                  <1>  push rdx
    53 00000007 56                  <1>  push rsi
    53 00000008 57                  <1>  push rdi
    53 00000009 4150                <1>  push r8
    53 0000000B 4151                <1>  push r9
    53 0000000D 4152                <1>  push r10
    53 0000000F 4153                <1>  push r11
    53 00000011 4154                <1>  push r12
    53 00000013 4155                <1>  push r13
    53 00000015 4156                <1>  push r14
    53 00000017 4157                <1>  push r15
    53 00000019 9C                  <1>  pushf
    54                                      ; Print prompt for the user's full name
    55 0000001A B801000000                  mov rax, SYS_write  
    56 0000001F BF01000000                  mov rdi, STDOUT     
    57 00000024 48BE-                       mov rsi, name_prompt        
    57 00000026 [0000000000000000] 
    58 0000002E BA1C000000                  mov rdx, 28 
    59 00000033 0F05                        syscall   
    60                                  
    61                                      ; Take name input 
    62 00000035 B800000000                  mov rax, SYS_read
    63 0000003A BF00000000                  mov rdi, STDIN
    64 0000003F 48BE-                       mov rsi, user_name 
    64 00000041 [0000000000000000] 
    65 00000049 BA1C000000                  mov rdx, 28 ; read count
    66 0000004E 0F05                        syscall
    67                                  
    68                                      ; Print prompt for the career path
    69 00000050 B801000000                  mov rax, SYS_write  
    70 00000055 BF01000000                  mov rdi, STDOUT     
    71 0000005A 48BE-                       mov rsi, career_prompt        
    71 0000005C [1E00000000000000] 
    72 00000064 BA30000000                  mov rdx, 48 
    73 00000069 0F05                        syscall 
    74                                  
    75                                      ; Take career path input 
    76 0000006B B800000000                  mov rax, SYS_read
    77 00000070 BF00000000                  mov rdi, STDIN
    78 00000075 48BE-                       mov rsi, career_path 
    78 00000077 [3000000000000000] 
    79 0000007F BA30000000                  mov rdx, string_size ; read count
    80 00000084 0F05                        syscall
    81                                  
    82                                      ; Print prompt the first thank you
    83 00000086 B801000000                  mov rax, SYS_write  
    84 0000008B BF01000000                  mov rdi, STDOUT     
    85 00000090 48BE-                       mov rsi, thankyou0        
    85 00000092 [4F00000000000000] 
    86 0000009A BA1E000000                  mov rdx, 30 
    87 0000009F 0F05                        syscall 
    88                                  
    89                                      ; Print career path
    90 000000A1 B801000000                  mov rax, SYS_write  
    91 000000A6 BF01000000                  mov rdi, STDOUT     
    92 000000AB 48BE-                       mov rsi, career_path        
    92 000000AD [3000000000000000] 
    93 000000B5 BA14000000                  mov rdx, 20 
    94 000000BA 0F05                        syscall 
    95                                  
    96                                      ; Print newline
    97 000000BC B801000000                  mov rax, SYS_write  
    98 000000C1 BF01000000                  mov rdi, STDOUT     
    99 000000C6 48BE-                       mov rsi, newline        
    99 000000C8 [6E00000000000000] 
   100 000000D0 BA01000000                  mov rdx, 1 
   101 000000D5 0F05                        syscall 
   102                                  
   103                                      ; Print prompt for 3 resistance inputs
   104 000000D7 B801000000                  mov rax, SYS_write  
   105 000000DC BF01000000                  mov rdi, STDOUT     
   106 000000E1 48BE-                       mov rsi, enter_resist        
   106 000000E3 [6F00000000000000] 
   107 000000EB BA79000000                  mov rdx, 121 
   108 000000F0 0F05                        syscall 
   109                                  
   110                                  ; =========== TAKE INPUT ARRAY OF 3 RESISTANCES DONE ==============
   111 000000F2 B800000000                  mov rax, 0 
   112 000000F7 48BF-                       mov rdi, arr       ; array
   112 000000F9 [6000000000000000] 
   113 00000101 BE03000000                  mov rsi, 3         ; count
   114 00000106 BA20000000                  mov rdx, 32        ; string buffer size
   115                                      GET_ARRAY_INPUT rdi, rsi, rdx
   115                              <1> 
   115                              <1> 
   115                              <1> 
   115                              <1> 
   115 0000010B 4D31FF              <1>  xor r15, r15
   115 0000010E 4989FD              <1>  mov r13, %1
   115 00000111 4989F6              <1>  mov r14, %2
   115                              <1> 
   115                              <1> .loop_start:
   115 00000114 4D39F7              <1>  cmp r15, r14
   115 00000117 7D36                <1>  jge .loop_end
   115                              <1> 
   115 00000119 6A00                <1>  push qword 0
   115 0000011B 6A00                <1>  push qword 0
   115                              <1> 
   115 0000011D B800000000          <1>  mov rax, 0
   115 00000122 BF00000000          <1>  mov rdi, 0
   115 00000127 4889E6              <1>  mov rsi, rsp
   115 0000012A 4889D2              <1>  mov rdx, %3
   115 0000012D 0F05                <1>  syscall
   115                              <1> 
   115                              <1> 
   115 0000012F B800000000          <1>  mov rax, 0
   115 00000134 4889E7              <1>  mov rdi, rsp
   115 00000137 E8(00000000)        <1>  call atof
   115 0000013C F2440F10F8          <1>  movsd xmm15, xmm0
   115                              <1> 
   115                              <1> 
   115 00000141 F2470F117CFD00      <1>  movsd qword [r13 + r15*8], xmm15
   115                              <1> 
   115 00000148 49FFC7              <1>  inc r15
   115                              <1> 
   115 0000014B 58                  <1>  pop rax
   115 0000014C 58                  <1>  pop rax
   115                              <1> 
   115 0000014D EBC5                <1>  jmp .loop_start
   115                              <1> 
   115                              <1> .loop_end:
   116                                      
   117                                  ; ; =========== CALL TESLA TO COMPUTE_RESISTANCE ==============
   118 0000014F B800000000                  mov rax, 0 
   119 00000154 4C89EF                      mov rdi, r13
   120 00000157 BE03000000                  mov rsi, 3
   121 0000015C E8(00000000)                call tesla
   122                                      ; movsd [total_resistance], xmm0
   123                                      ; call ftoa
   124                                  
   125                                      ; cvttsd2si rax, xmm0            ; convert float to integer (truncate)
   126 00000161 E8(00000000)                call ftoa                ; convert float to inst
   127                                  
   128                                  
   129                                  
   130                                  ; =======================
   131                                      ; Print total resistance
   132 00000166 B801000000                  mov rax, SYS_write  
   133 0000016B BF01000000                  mov rdi, STDOUT     
   134 00000170 48BE-                       mov rsi, total_resist        
   134 00000172 [E900000000000000] 
   135 0000017A BA48000000                  mov rdx, 72
   136 0000017F 0F05                        syscall 
   137                                  
   138                                      ; Print first half of decimal
   139                                      ; mov rax, SYS_write                    ; SYS_write syscall number
   140                                      ; mov rdi, STDOUT                    ; File descriptor 1 = STDOUT
   141                                      ; mov rsi, r14                  ; rsi points to the result string
   142                                      ; mov rdx, 5                   ; Set a maximum number of characters to print (adjust as needed)
   143                                      ; syscall
   144                                  
   145                                      ; mov rax, SYS_write                    ; SYS_write syscall number
   146                                      ; mov rdi, STDOUT                    ; File descriptor 1 = STDOUTT
   147                                      ; mov rsi, decimal                  ; rsi points to the result string
   148                                      ; mov rdx, 1                   ; Set a maximum number of characters to print (adjust as needed)
   149                                      ; syscall
   150                                  
   151                                      ; ; Print second half of decimal
   152                                      ; mov rax, SYS_write                    ; SYS_write syscall number
   153                                      ; mov rdi, STDOUT                    ; File descriptor 1 = STDOUT
   154                                      ; mov rsi, r12        
   155                                      ; mov rdx, 10
   156                                      ; syscall 
   157                                  
   158                                  
   159                                  ; =========== PRINT TOTAL RESISTANCE ==============
   160                                      
   161                                  
   162 00000181 B801000000                  mov rax, SYS_write  
   163 00000186 BF01000000                  mov rdi, STDOUT     
   164 0000018B 48BE-                       mov rsi, total_resistance       
   164 0000018D [7800000000000000] 
   165 00000195 BA19000000                  mov rdx, 25
   166 0000019A 0F05                        syscall 
   167                                  
   168                                  
   169                                  ;     ; Print prompt for user to enter the EMF
   170                                  ;     mov rax, SYS_write  
   171                                  ;     mov rdi, STDOUT     
   172                                  ;     mov rsi, emf_msg        
   173                                  ;     mov rdx, 103
   174                                  ;     syscall 
   175                                  
   176                                  ; ; =========== TAKE INPUT FOR EMF ==============
   177                                  
   178                                  ;     ; Print current
   179                                  ;     mov rax, SYS_write  
   180                                  ;     mov rdi, STDOUT     
   181                                  ;     mov rsi, compute_current        
   182                                  ;     mov rdx, 67 
   183                                  ;     syscall 
   184                                  
   185                                  ; =========== CALL TESLA TO COMPUTE_CURRENT ==============
   186                                  ; =========== PRINT COMPUTED VALUE ==============
   187                                  
   188                                      ; Print the last thanks
   189                                      ; mov rax, SYS_write  
   190                                      ; mov rdi, STDOUT     
   191                                      ; mov rsi, last_thanks        
   192                                      ; mov rdx, 16 
   193                                      ; syscall     
   194                                  
   195                                      ; ; Print the user's name
   196                                      ; mov rax, SYS_write  
   197                                      ; mov rdi, STDOUT     
   198                                      ; mov rsi, user_name        
   199                                      ; mov rdx, 16 
   200                                      ; syscall 
   201                                  ; =========== PRINT REST OF THE MESSAGE ==============
   202                                      restoreGPRs
   202 0000019C 9D                  <1>  popf
   202 0000019D 415F                <1>  pop r15
   202 0000019F 415E                <1>  pop r14
   202 000001A1 415D                <1>  pop r13
   202 000001A3 415C                <1>  pop r12
   202 000001A5 415B                <1>  pop r11
   202 000001A7 415A                <1>  pop r10
   202 000001A9 4159                <1>  pop r9
   202 000001AB 4158                <1>  pop r8
   202 000001AD 5E                  <1>  pop rsi
   202 000001AE 5F                  <1>  pop rdi
   202 000001AF 5A                  <1>  pop rdx
   202 000001B0 59                  <1>  pop rcx
   202 000001B1 5B                  <1>  pop rbx
   202 000001B2 5D                  <1>  pop rbp
   203 000001B3 C3                          ret
