     1                                  extern edison
     2                                  %include "get_res.inc"  
     1                              <1> ;****************************************************************************************************************************
     2                              <1> ; Program name: Non-deterministic Random Numbers
     3                              <1> ; This program generates up to 100 random numbers using the non-deterministic random number generator found inside modern 
     4                              <1> ; x86 microprocessors. The generated numbers are then normalized to the range 1.0 to 2.0 and sorted. 
     5                              <1> ; Copyright (C) 2025 Michelle Pham
     6                              <1> ;                                                                                                                         
     7                              <1> ; This file is part of the software program "Non-deterministic Random Numbers".                                    
     8                              <1> ; "Non-deterministic Random Numbers" is free software: you can redistribute it and/or modify it under the terms of    
     9                              <1> ; the GNU General Public License version 3 as published by the Free Software Foundation.                                  
    10                              <1> ; "Non-deterministic Random Numbers" is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;     
    11                              <1> ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public     
    12                              <1> ; License for more details. A copy of the GNU General Public License v3 is available here: <https://www.gnu.org/licenses/>.
    13                              <1> ;****************************************************************************************************************************
    14                              <1> 
    15                              <1> ;================================================================================================================================
    16                              <1> ;
    17                              <1> ; Author Information
    18                              <1> ;  Name: Michelle Pham
    19                              <1> ;  Email: mp28jam@csu.fullerton.edu
    20                              <1> ;  CWID: 867434789
    21                              <1> ;  Course: CPSC 240-03
    22                              <1> ;
    23                              <1> ; Program Information
    24                              <1> ;  Name: Non-deterministic Random Numbers
    25                              <1> ;  Programming Languages: x86-64 Assembly, C++
    26                              <1> ;  Effective Date: March 25, 2025
    27                              <1> ;  Latest Update: March 25, 2025
    28                              <1> ;  Date open source license added: March 25, 2025
    29                              <1> ;  Files: main.cpp, executive.asm, fill_random_array.asm, isnan.asm
    30                              <1> ;  Status: Incomplete
    31                              <1> ;  References Consulted: Ed Jorgensen, "x86-64 Assembly Language Programming with Ubuntu"
    32                              <1> ;  Future Upgrades: Implement advanced sorting algorithms and parallel number generation.
    33                              <1> ;
    34                              <1> ; Purpose
    35                              <1> ;  This program generates up to 100 random numbers using the non-deterministic random number generator (RDRAND) in modern x86 
    36                              <1> ;  microprocessors. The generated numbers are normalized to the range 1.0 to 2.0 and then sorted to produce an ordered list. The 
    37                              <1> ;  goal is to practice techniques for handling random number generation, normalization, and sorting in x86-64 assembly.
    38                              <1> ;
    39                              <1> ; Development Information
    40                              <1> ;  OS: Ubuntu 22.04.4 LTS
    41                              <1> ;  Text Editor: Visual Studio Code
    42                              <1> ;  Tools: NASM, G++ compiler, GDB
    43                              <1> ;
    44                              <1> ; Current File Information
    45                              <1> ;  Name: utilities.inc
    46                              <1> ;  Language: x86-64 Assembly with Intel syntax
    47                              <1> ;  An include file to store macros for this program.
    48                              <1> ;
    49                              <1> ;================================================================================================================================
    50                              <1> 
    51                              <1> ;Back-up GPRs
    52                              <1> %macro    backupGPRs 0
    53                              <1>   push    rbp
    54                              <1>   mov    rbp, rsp
    55                              <1>   push    rbx
    56                              <1>   push    rcx
    57                              <1>   push    rdx
    58                              <1>   push    rsi
    59                              <1>   push    rdi
    60                              <1>   push    r8
    61                              <1>   push    r9
    62                              <1>   push    r10
    63                              <1>   push    r11
    64                              <1>   push    r12
    65                              <1>   push    r13
    66                              <1>   push    r14
    67                              <1>   push    r15
    68                              <1>   pushf
    69                              <1> %endmacro
    70                              <1> 
    71                              <1> ;Restore GPRs
    72                              <1> %macro    restoreGPRs 0
    73                              <1>   popf
    74                              <1>   pop    r15
    75                              <1>   pop    r14
    76                              <1>   pop    r13
    77                              <1>   pop    r12
    78                              <1>   pop    r11
    79                              <1>   pop    r10
    80                              <1>   pop    r9
    81                              <1>   pop    r8
    82                              <1>   pop    rsi
    83                              <1>   pop    rdi
    84                              <1>   pop    rdx
    85                              <1>   pop    rcx
    86                              <1>   pop    rbx
    87                              <1>   pop    rbp
    88                              <1> %endmacro
    89                              <1> 
    90                              <1> %macro    backupNGPRs 1
    91                              <1>   mov    rax, 7
    92                              <1>   mov    rdx, 0
    93                              <1>   xsave    [%1]
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> %macro    restoreNGPRs 1
    97                              <1>   mov    rax, 7
    98                              <1>   mov    rdx, 0
    99                              <1>   xrstor    [%1]
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;Print out author information and calculate the area using Huron's formula
   103                              <1> %macro    authorInfo 0
   104                              <1>   mov    rax, 0
   105                              <1>   mov    rdi, author_info
   106                              <1>   call    printf
   107                              <1> %endmacro
   108                              <1> 
   109                              <1> 
   110                              <1> %macro GET_ARRAY_INPUT 3
   111                              <1>     ; %1 = destination array (e.g., arr)
   112                              <1>     ; %2 = number of elements (e.g., 3)
   113                              <1>     ; %3 = string buffer size (e.g., 32)
   114                              <1> 
   115                              <1>     xor    r15, r15             ; r15 = index
   116                              <1>     mov    r13, %1              ; r13 = base address of array
   117                              <1>     mov    r14, %2              ; r14 = number of elements
   118                              <1> 
   119                              <1> .loop_start:
   120                              <1>     cmp    r15, r14
   121                              <1>     jge    .loop_end
   122                              <1> 
   123                              <1>     push   qword 0              ; align stack for scanf (16-byte)
   124                              <1>     push   qword 0
   125                              <1> 
   126                              <1>     mov    rax, 0               ; syscall: SYS_read (0)
   127                              <1>     mov    rdi, 0               ; STDIN
   128                              <1>     mov    rsi, rsp             ; buffer (top of stack)
   129                              <1>     mov    rdx, %3              ; buffer size (e.g., 32)
   130                              <1>     syscall
   131                              <1> 
   132                              <1>     ; Convert input string to double
   133                              <1>     mov    rax, 0
   134                              <1>     mov    rdi, rsp
   135                              <1>     call   atof
   136                              <1>     movsd  xmm15, xmm0
   137                              <1> 
   138                              <1>     ; Store into array
   139                              <1>     movsd  qword [r13 + r15*8], xmm15
   140                              <1> 
   141                              <1>     inc    r15
   142                              <1> 
   143                              <1>     pop    rax
   144                              <1>     pop    rax
   145                              <1> 
   146                              <1>     jmp    .loop_start
   147                              <1> 
   148                              <1> .loop_end:
   149                              <1> %endmacro
     3                                  
     4                                  
     5                                  STDOUT equ 1       ; Standard output
     6                                  SYS_write equ 1    ; syscall number for write
     7                                  SYS_exit equ 60
     8                                  
     9                                  
    10                                  
    11                                  section .data
    12 00000000 57656C636F6D652074-     welcome_msg db "Welcome to Electricity brought to you by Michelle Pham.", 10
    12 00000009 6F20456C6563747269-
    12 00000012 636974792062726F75-
    12 0000001B 67687420746F20796F-
    12 00000024 75206279204D696368-
    12 0000002D 656C6C65205068616D-
    12 00000036 2E0A               
    13 00000038 546869732070726F67-                 db "This program will compute the resistance current flow in your direct circuit.", 10, 0
    13 00000041 72616D2077696C6C20-
    13 0000004A 636F6D707574652074-
    13 00000053 686520726573697374-
    13 0000005C 616E63652063757272-
    13 00000065 656E7420666C6F7720-
    13 0000006E 696E20796F75722064-
    13 00000077 697265637420636972-
    13 00000080 637569742E0A00     
    14 00000087 0A00                                db "", 10, 0
    15 00000089 8900000000000000        msgLen dq $ - welcome_msg 
    16                                  
    17 00000091 546865206472697665-     driver_msg db "The driver received this number ", 0
    17 0000009A 722072656365697665-
    17 000000A3 642074686973206E75-
    17 000000AC 6D6265722000       
    18 000000B2 2100000000000000        driverLen dq $ - driver_msg 
    19                                  
    20 000000BA 616E642077696C6C20-     zero_msg db "and will keep it until next semester.", 10
    20 000000C3 6B6565702069742075-
    20 000000CC 6E74696C206E657874-
    20 000000D5 2073656D6573746572-
    20 000000DE 2E0A               
    21 000000E0 41207A65726F207769-              db "A zero will be returned to the Operating System", 10, 0
    21 000000E9 6C6C20626520726574-
    21 000000F2 75726E656420746F20-
    21 000000FB 746865204F70657261-
    21 00000104 74696E672053797374-
    21 0000010D 656D0A00           
    22 00000111 5700000000000000        zeroLen dq $ - zero_msg 
    23                                  
    24                                  
    25                                        ; Compute message length at assembly time
    26                                  
    27                                  section .bss
    28                                  
    29                                  section .text
    30                                  global _start             ; Define the entry point
    31                                  
    32                                  _start:
    33                                  
    34                                  ;     backupGPRs
    35 00000000 B801000000                  mov rax, SYS_write  
    36 00000005 BF01000000                  mov rdi, STDOUT     
    37 0000000A 48BE-                       mov rsi, welcome_msg        
    37 0000000C [0000000000000000] 
    38 00000014 488B1425[89000000]          mov rdx, qword [msgLen] 
    39 0000001C 0F05                        syscall    
    40                                  
    41                                      ; ============== CALL EDISION =====================
    42 0000001E B800000000                  mov rax, 0
    43 00000023 E8(00000000)                call edison
    44                                      
    45                                      ; mov rax, SYS_write  
    46                                      ; mov rdi, STDOUT     
    47                                      ; mov rsi, driver_msg        
    48                                      ; mov rdx, qword [driverLen] 
    49                                      ; syscall  
    50                                  
    51                                      ; mov rax, SYS_write  
    52                                      ; mov rdi, STDOUT     
    53                                      ; mov rsi, zero_msg        
    54                                      ; mov rdx, qword [zeroLen] 
    55                                      ; syscall  
    56                                  ;     restoreGPRs
    57                                  
    58 00000028 B83C000000                  mov rax, SYS_exit     ; syscall: exit
    59 0000002D 4831FF                      xor rdi, rdi          ; status 0
    60 00000030 0F05                        syscall               ; invoke kernel
