     1                                  ;*******************************************************************************************************************
     2                                  ;Program name: "Electricity". This program computes missing electrical information from a circuit consisting of *
     3                                  ;three sub-circuits running on direct current (DC). Copyright (C) 2025 Michelle Pham                                
     4                                  ;                                                                                                                   
     5                                  ;This file is part of the software program "Electricity".                                                       
     6                                  ;Electricity is free software: you can redistribute it and/or modify it under the terms of the GNU General    
     7                                  ;Public License version 3 as published by the Free Software Foundation.                                                  
     8                                  ;Electricity is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the      
     9                                  ;implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for 
    10                                  ;more details. A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.               
    11                                  ;*******************************************************************************************************************
    12                                  
    13                                  ;====================================================================================================================
    14                                  ;
    15                                  ;Author Information
    16                                  ;  Name: Michelle Pham
    17                                  ;  Email: mp28jam@csu.fullerton.edu
    18                                  ;  CWID: 867434789
    19                                  ;
    20                                  ;Program Information
    21                                  ;  Name: Electricity
    22                                  ;  Programming Language: x86-64 (Pure Assembly)
    23                                  ;  Effective Date: April 11, 2025
    24                                  ;  Latest Update: April 11, 2025
    25                                  ;  Date open source license added: April 11, 2025
    26                                  ;  Files: atof.asm, edison.asm, faraday.asm, get_res.inc, int_to_str.asm, isfloat.asm, r.sh, tesla.asm
    27                                  ;  Status: Completed
    28                                  ;  References Consulted: Ed Jorgensen, "x86-64 Assembly Language Programming with Ubuntu"
    29                                  ;  Future Upgrades: Add support for alternating current (AC) and multi-loop circuits. Improve floating-point handling 
    30                                  ;  and input validation.
    31                                  ;
    32                                  ;Purpose
    33                                  ;  This program receives partial information about a DC electric circuit composed of three sub-circuits. Based on the 
    34                                  ;  input provided by the user, it calculates missing values such as voltage, current, or resistance using Ohm’s Law 
    35                                  ;  and basic circuit rules. This project was designed not only to apply problem-solving to electrical engineering 
    36                                  ;  concepts, but also to provide the programmer with experience in developing a **pure assembly** program.
    37                                  ;
    38                                  ;Pure Assembly Philosophy
    39                                  ;  The program is intentionally built using **pure assembly language**, meaning it uses only the native x86-64 assembly
    40                                  ;  without relying on supporting languages like C or C++. This contrasts with hybrid assembly programs that interface
    41                                  ;  with high-level languages. The objective is to give the programmer a deeper understanding of low-level operations 
    42                                  ;  and direct hardware interaction by avoiding abstraction layers.
    43                                  ;
    44                                  ;Development Information
    45                                  ;  OS: Ubuntu 22.04.4 LTS
    46                                  ;  Text Editor: Github Codespaces
    47                                  ;  Tools: NASM assembler, LD linker
    48                                  ;
    49                                  ;Current File Information
    50                                  ;  Name: faraday.asm
    51                                  ;  Language: x86-64 Assembly (Intel syntax)
    52                                  ;  Max page width: 130 columns
    53                                  ;  Assemble: nasm -f elf64 -l faraday.lis -o faraday.o faraday.asm
    54                                  ;================================================================================================================================
    55                                  
    56                                  extern edison
    57                                  extern int_to_str
    58                                  %include "get_res.inc"  
     1                              <1> ;*******************************************************************************************************************
     2                              <1> ;Program name: "Electricity". This program computes missing electrical information from a circuit consisting of *
     3                              <1> ;three sub-circuits running on direct current (DC). Copyright (C) 2025 Michelle Pham                                
     4                              <1> ;                                                                                                                   
     5                              <1> ;This file is part of the software program "Electricity".                                                       
     6                              <1> ;Electricity is free software: you can redistribute it and/or modify it under the terms of the GNU General    
     7                              <1> ;Public License version 3 as published by the Free Software Foundation.                                                  
     8                              <1> ;Electricity is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the      
     9                              <1> ;implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for 
    10                              <1> ;more details. A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.               
    11                              <1> ;*******************************************************************************************************************
    12                              <1> 
    13                              <1> ;====================================================================================================================
    14                              <1> ;
    15                              <1> ;Author Information
    16                              <1> ;  Name: Michelle Pham
    17                              <1> ;  Email: mp28jam@csu.fullerton.edu
    18                              <1> ;  CWID: 867434789
    19                              <1> ;
    20                              <1> ;Program Information
    21                              <1> ;  Name: Electricity
    22                              <1> ;  Programming Language: x86-64 (Pure Assembly)
    23                              <1> ;  Effective Date: April 11, 2025
    24                              <1> ;  Latest Update: April 11, 2025
    25                              <1> ;  Date open source license added: April 11, 2025
    26                              <1> ;  Files: atof.asm, edison.asm, faraday.asm, get_res.inc, int_to_str.asm, isfloat.asm, r.sh, tesla.asm
    27                              <1> ;  Status: Completed
    28                              <1> ;  References Consulted: Ed Jorgensen, "x86-64 Assembly Language Programming with Ubuntu"
    29                              <1> ;  Future Upgrades: Add support for alternating current (AC) and multi-loop circuits. Improve floating-point handling 
    30                              <1> ;  and input validation.
    31                              <1> ;
    32                              <1> ;Purpose
    33                              <1> ;  This program receives partial information about a DC electric circuit composed of three sub-circuits. Based on the 
    34                              <1> ;  input provided by the user, it calculates missing values such as voltage, current, or resistance using Ohm’s Law 
    35                              <1> ;  and basic circuit rules. This project was designed not only to apply problem-solving to electrical engineering 
    36                              <1> ;  concepts, but also to provide the programmer with experience in developing a **pure assembly** program.
    37                              <1> ;
    38                              <1> ;Pure Assembly Philosophy
    39                              <1> ;  The program is intentionally built using **pure assembly language**, meaning it uses only the native x86-64 assembly
    40                              <1> ;  without relying on supporting languages like C or C++. This contrasts with hybrid assembly programs that interface
    41                              <1> ;  with high-level languages. The objective is to give the programmer a deeper understanding of low-level operations 
    42                              <1> ;  and direct hardware interaction by avoiding abstraction layers.
    43                              <1> ;
    44                              <1> ;Development Information
    45                              <1> ;  OS: Ubuntu 22.04.4 LTS
    46                              <1> ;  Text Editor: Github Codespaces
    47                              <1> ;  Tools: NASM assembler, LD linker
    48                              <1> ;
    49                              <1> ;Current File Information
    50                              <1> ;  Name: get_res.inc
    51                              <1> ;  Language: x86-64 Assembly (Intel syntax)
    52                              <1> ;  Max page width: 130 columns
    53                              <1> ;================================================================================================================================
    54                              <1> 
    55                              <1> ;Back-up GPRs
    56                              <1> %macro    backupGPRs 0
    57                              <1>   push    rbp
    58                              <1>   mov    rbp, rsp
    59                              <1>   push    rbx
    60                              <1>   push    rcx
    61                              <1>   push    rdx
    62                              <1>   push    rsi
    63                              <1>   push    rdi
    64                              <1>   push    r8
    65                              <1>   push    r9
    66                              <1>   push    r10
    67                              <1>   push    r11
    68                              <1>   push    r12
    69                              <1>   push    r13
    70                              <1>   push    r14
    71                              <1>   push    r15
    72                              <1>   pushf
    73                              <1> %endmacro
    74                              <1> 
    75                              <1> ;Restore GPRs
    76                              <1> %macro    restoreGPRs 0
    77                              <1>   popf
    78                              <1>   pop    r15
    79                              <1>   pop    r14
    80                              <1>   pop    r13
    81                              <1>   pop    r12
    82                              <1>   pop    r11
    83                              <1>   pop    r10
    84                              <1>   pop    r9
    85                              <1>   pop    r8
    86                              <1>   pop    rsi
    87                              <1>   pop    rdi
    88                              <1>   pop    rdx
    89                              <1>   pop    rcx
    90                              <1>   pop    rbx
    91                              <1>   pop    rbp
    92                              <1> %endmacro
    93                              <1> 
    94                              <1> %macro    backupNGPRs 1
    95                              <1>   mov    rax, 7
    96                              <1>   mov    rdx, 0
    97                              <1>   xsave    [%1]
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> %macro    restoreNGPRs 1
   101                              <1>   mov    rax, 7
   102                              <1>   mov    rdx, 0
   103                              <1>   xrstor    [%1]
   104                              <1> %endmacro
   105                              <1> 
   106                              <1> 
   107                              <1> %macro GET_INPUT 3
   108                              <1>     ; %1 = destination array (e.g., arr)
   109                              <1>     ; %2 = number of elements (e.g., 3)
   110                              <1>     ; %3 = string buffer size (e.g., 32)
   111                              <1> 
   112                              <1>     xor    r15, r15             ; r15 = index
   113                              <1>     mov    r13, %1              ; r13 = base address of array
   114                              <1>     mov    r14, %2              ; r14 = number of elements
   115                              <1> 
   116                              <1> .loop_start:
   117                              <1>     cmp    r15, r14
   118                              <1>     jge    .loop_end
   119                              <1> 
   120                              <1> .loop_input:
   121                              <1>     xor    rax, rax             ; clear rax
   122                              <1>     push   qword 0              ; align stack (16-byte)
   123                              <1>     push   qword 0
   124                              <1> 
   125                              <1>     mov    rax, 0               ; syscall: SYS_read
   126                              <1>     mov    rdi, 0               ; STDIN
   127                              <1>     mov    rsi, rsp             ; buffer (top of stack)
   128                              <1>     mov    rdx, 32              ; buffer size (e.g., 32)
   129                              <1>     syscall
   130                              <1> 
   131                              <1>     cmp    eax, -1
   132                              <1>     je     .ctrl_d
   133                              <1> 
   134                              <1> 
   135                              <1>     mov     rcx, 0
   136                              <1> .loop_trim:
   137                              <1>     mov     al, byte [rsp + rcx]
   138                              <1>     cmp     al, 0
   139                              <1>     je      .done_trim
   140                              <1>     cmp     al, 10             ; newline?
   141                              <1>     jne     .not_newline
   142                              <1>     mov     byte [rsp + rcx], 0
   143                              <1>     jmp     .done_trim
   144                              <1> .not_newline:
   145                              <1>     inc     rcx
   146                              <1>     jmp     .loop_trim
   147                              <1> .done_trim:
   148                              <1> 
   149                              <1>     xor    rax, rax
   150                              <1>     mov    rdi, rsp
   151                              <1>     call   isfloat
   152                              <1>     cmp    rax, 0
   153                              <1>     je     .invalid_input
   154                              <1> 
   155                              <1>     ; Convert input string to float
   156                              <1>     xor    rax, rax
   157                              <1>     mov    rdi, rsp
   158                              <1>     call   atof
   159                              <1>     movsd  xmm15, xmm0
   160                              <1> 
   161                              <1>     ; Store into array
   162                              <1>     movsd [r13 + r15*8], xmm15
   163                              <1> 
   164                              <1>     inc    r15
   165                              <1> 
   166                              <1>     pop    rax
   167                              <1>     pop    rax
   168                              <1> 
   169                              <1>     jmp    .loop_start
   170                              <1> 
   171                              <1> .invalid_input:
   172                              <1>     pop    rax
   173                              <1>     pop    rax
   174                              <1> 
   175                              <1>     xor    rax, rax
   176                              <1>     mov    rax, 1               ; syscall: SYS_write
   177                              <1>     mov    rdi, 1               ; STDOUT
   178                              <1>     mov    rsi, prompt_input    ; prompt message address
   179                              <1>     mov    rdx, 27              ; length of prompt message
   180                              <1>     syscall
   181                              <1> 
   182                              <1>     jmp    .loop_input          ; retry input for the same index
   183                              <1> 
   184                              <1> .ctrl_d:
   185                              <1>     pop    rax
   186                              <1>     pop    rax
   187                              <1> 
   188                              <1> .loop_end:
   189                              <1>     mov    rax, r15   
   190                              <1> %endmacro
   191                              <1> 
   192                              <1> %macro FTOA_PRINT 0
   193                              <1>     ; Save original float value
   194                              <1>     movsd xmm5, xmm0
   195                              <1> 
   196                              <1>     ; Extract integer part from float
   197                              <1>     cvttsd2si rax, xmm0
   198                              <1>     mov r10, rax
   199                              <1> 
   200                              <1>     ; Convert integer part to string and print
   201                              <1>     call int_to_str
   202                              <1>     mov rsi, rax
   203                              <1>     mov rax, 1
   204                              <1>     mov rdi, 1
   205                              <1>     mov rdx, 10
   206                              <1>     syscall
   207                              <1> 
   208                              <1>     ; Multiply to shift decimal portion
   209                              <1>     movsd xmm1, [precision]
   210                              <1>     movsd xmm2, xmm0
   211                              <1>     mulsd xmm2, xmm1
   212                              <1>     cvttsd2si r9, xmm2
   213                              <1> 
   214                              <1>     ; Calculate scaled integer part for subtraction
   215                              <1>     mov r11, [precision_int]
   216                              <1>     imul r10, r11
   217                              <1> 
   218                              <1>     ; Extract decimal digits
   219                              <1>     mov r8, r9
   220                              <1>     sub r8, r10
   221                              <1>     mov rax, r8
   222                              <1>     call int_to_str
   223                              <1>     mov r12, rax
   224                              <1> 
   225                              <1>     ; Print the decimal point
   226                              <1>     mov rax, 1
   227                              <1>     mov rdi, 1
   228                              <1>     mov rsi, decimal
   229                              <1>     mov rdx, 1
   230                              <1>     syscall
   231                              <1> 
   232                              <1>     ; Print right-hand side of the decimal
   233                              <1>     mov rax, 1
   234                              <1>     mov rdi, 1
   235                              <1>     mov rsi, r12
   236                              <1>     mov rdx, 10
   237                              <1>     syscall
   238                              <1> %endmacro
   239                              <1> 
   240                              <1> %macro remove_newline 1
   241                              <1>     ; %1 = buffer address (e.g., user_name)
   242                              <1>     xor rcx, rcx
   243                              <1> .strip_loop_%1:
   244                              <1>     mov al, [%1 + rcx]
   245                              <1>     cmp al, 0
   246                              <1>     je .done_strip_%1
   247                              <1>     cmp al, 10             ; newline character?
   248                              <1>     jne .not_newline_%1
   249                              <1>     mov byte [%1 + rcx], 0 ; replace newline with null terminator
   250                              <1>     jmp .done_strip_%1
   251                              <1> .not_newline_%1:
   252                              <1>     inc rcx
   253                              <1>     jmp .strip_loop_%1
   254                              <1> .done_strip_%1:
   255                              <1> %endmacro
   256                              <1> 
   257                              <1> 
    59                                  
    60                                  STDOUT equ 1       ; Standard output
    61                                  SYS_write equ 1    ; syscall number for write
    62                                  SYS_exit equ 60
    63                                  
    64                                  section .data
    65 00000000 57656C636F6D652074-     welcome_msg db "Welcome to Electricity brought to you by Michelle Pham.", 10
    65 00000009 6F20456C6563747269-
    65 00000012 636974792062726F75-
    65 0000001B 67687420746F20796F-
    65 00000024 75206279204D696368-
    65 0000002D 656C6C65205068616D-
    65 00000036 2E0A               
    66 00000038 546869732070726F67-                 db "This program will compute the resistance current flow in your direct circuit.", 10, 0
    66 00000041 72616D2077696C6C20-
    66 0000004A 636F6D707574652074-
    66 00000053 686520726573697374-
    66 0000005C 616E63652063757272-
    66 00000065 656E7420666C6F7720-
    66 0000006E 696E20796F75722064-
    66 00000077 697265637420636972-
    66 00000080 637569742E0A00     
    67 00000087 0A00                                db "", 10, 0
    68                                  
    69 00000089 546865206472697665-     driver_msg db "The driver received this number ", 0
    69 00000092 722072656365697665-
    69 0000009B 642074686973206E75-
    69 000000A4 6D6265722000       
    70                                  
    71 000000AA 2C20616E642077696C-     zero_msg db ", and will keep it until next semester.", 10
    71 000000B3 6C206B656570206974-
    71 000000BC 20756E74696C206E65-
    71 000000C5 78742073656D657374-
    71 000000CE 65722E0A           
    72 000000D2 41207A65726F207769-              db "A zero will be returned to the Operating System", 10, 0
    72 000000DB 6C6C20626520726574-
    72 000000E4 75726E656420746F20-
    72 000000ED 746865204F70657261-
    72 000000F6 74696E672053797374-
    72 000000FF 656D0A00           
    73 00000103 0A                      newline db "", 10
    74 00000104 2E00                    decimal db ".", 0
    75 00000106 00000000D0126341        precision dq 10000000.0              ; For floating-point math
    76 0000010E 8096980000000000        precision_int dq 10000000
    77                                  
    78                                  section .bss
    79                                  
    80                                  section .text
    81                                  global _start            
    82                                  
    83                                  _start:
    84                                  
    85                                      backupGPRs
    85 00000000 55                  <1>  push rbp
    85 00000001 4889E5              <1>  mov rbp, rsp
    85 00000004 53                  <1>  push rbx
    85 00000005 51                  <1>  push rcx
    85 00000006 52                  <1>  push rdx
    85 00000007 56                  <1>  push rsi
    85 00000008 57                  <1>  push rdi
    85 00000009 4150                <1>  push r8
    85 0000000B 4151                <1>  push r9
    85 0000000D 4152                <1>  push r10
    85 0000000F 4153                <1>  push r11
    85 00000011 4154                <1>  push r12
    85 00000013 4155                <1>  push r13
    85 00000015 4156                <1>  push r14
    85 00000017 4157                <1>  push r15
    85 00000019 9C                  <1>  pushf
    86                                  
    87                                      ; Display the welcome message
    88 0000001A B801000000                  mov rax, SYS_write  
    89 0000001F BF01000000                  mov rdi, STDOUT     
    90 00000024 48BE-                       mov rsi, welcome_msg        
    90 00000026 [0000000000000000] 
    91 0000002E BA89000000                  mov rdx, 137
    92 00000033 0F05                        syscall    
    93                                  
    94                                      ; Call the edison function
    95 00000035 B800000000                  mov rax, 0
    96 0000003A E8(00000000)                call edison
    97                                      
    98                                      ; Display the driver message
    99 0000003F B801000000                  mov rax, SYS_write  
   100 00000044 BF01000000                  mov rdi, STDOUT     
   101 00000049 48BE-                       mov rsi, driver_msg        
   101 0000004B [8900000000000000] 
   102 00000053 BA20000000                  mov rdx, 32
   103 00000058 0F05                        syscall  
   104                                  
   105                                      ; Print the returned valaue
   106                                      FTOA_PRINT
   106                              <1> 
   106 0000005A F20F10E8            <1>  movsd xmm5, xmm0
   106                              <1> 
   106                              <1> 
   106 0000005E F2480F2CC0          <1>  cvttsd2si rax, xmm0
   106 00000063 4989C2              <1>  mov r10, rax
   106                              <1> 
   106                              <1> 
   106 00000066 E8(00000000)        <1>  call int_to_str
   106 0000006B 4889C6              <1>  mov rsi, rax
   106 0000006E B801000000          <1>  mov rax, 1
   106 00000073 BF01000000          <1>  mov rdi, 1
   106 00000078 BA0A000000          <1>  mov rdx, 10
   106 0000007D 0F05                <1>  syscall
   106                              <1> 
   106                              <1> 
   106 0000007F F20F100C25-         <1>  movsd xmm1, [precision]
   106 00000084 [06010000]          <1>
   106 00000088 F20F10D0            <1>  movsd xmm2, xmm0
   106 0000008C F20F59D1            <1>  mulsd xmm2, xmm1
   106 00000090 F24C0F2CCA          <1>  cvttsd2si r9, xmm2
   106                              <1> 
   106                              <1> 
   106 00000095 4C8B1C25[0E010000]  <1>  mov r11, [precision_int]
   106 0000009D 4D0FAFD3            <1>  imul r10, r11
   106                              <1> 
   106                              <1> 
   106 000000A1 4D89C8              <1>  mov r8, r9
   106 000000A4 4D29D0              <1>  sub r8, r10
   106 000000A7 4C89C0              <1>  mov rax, r8
   106 000000AA E8(00000000)        <1>  call int_to_str
   106 000000AF 4989C4              <1>  mov r12, rax
   106                              <1> 
   106                              <1> 
   106 000000B2 B801000000          <1>  mov rax, 1
   106 000000B7 BF01000000          <1>  mov rdi, 1
   106 000000BC 48BE-               <1>  mov rsi, decimal
   106 000000BE [0401000000000000]  <1>
   106 000000C6 BA01000000          <1>  mov rdx, 1
   106 000000CB 0F05                <1>  syscall
   106                              <1> 
   106                              <1> 
   106 000000CD B801000000          <1>  mov rax, 1
   106 000000D2 BF01000000          <1>  mov rdi, 1
   106 000000D7 4C89E6              <1>  mov rsi, r12
   106 000000DA BA0A000000          <1>  mov rdx, 10
   106 000000DF 0F05                <1>  syscall
   107                                  
   108                                      ; Display the final output message
   109 000000E1 B801000000                  mov rax, SYS_write  
   110 000000E6 BF01000000                  mov rdi, STDOUT     
   111 000000EB 48BE-                       mov rsi, zero_msg        
   111 000000ED [AA00000000000000] 
   112 000000F5 BA46000000                  mov rdx, 70 
   113 000000FA 0F05                        syscall  
   114                                  
   115                                      ; mov rax, SYS_write  
   116                                      ; mov rdi, STDOUT     
   117                                      ; mov rsi, newline        
   118                                      ; mov rdx, 1 
   119                                      ; syscall 
   120                                  
   121                                      restoreGPRs
   121 000000FC 9D                  <1>  popf
   121 000000FD 415F                <1>  pop r15
   121 000000FF 415E                <1>  pop r14
   121 00000101 415D                <1>  pop r13
   121 00000103 415C                <1>  pop r12
   121 00000105 415B                <1>  pop r11
   121 00000107 415A                <1>  pop r10
   121 00000109 4159                <1>  pop r9
   121 0000010B 4158                <1>  pop r8
   121 0000010D 5E                  <1>  pop rsi
   121 0000010E 5F                  <1>  pop rdi
   121 0000010F 5A                  <1>  pop rdx
   121 00000110 59                  <1>  pop rcx
   121 00000111 5B                  <1>  pop rbx
   121 00000112 5D                  <1>  pop rbp
   122 00000113 B83C000000                  mov rax, SYS_exit     ; syscall: exit
   123 00000118 4831FF                      xor rdi, rdi          ; status 0
   124 0000011B 0F05                        syscall               ; invoke kernel
