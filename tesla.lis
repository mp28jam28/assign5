     1                                  STDIN equ 0       ; Standard input
     2                                  STDOUT equ 1       ; Standard output
     3                                  
     4                                  SYS_read equ 0     ; syscall number for read
     5                                  SYS_write equ 1    ; syscall number for write
     6                                  SYS_exit equ 60
     7                                  
     8                                  string_size equ 48
     9                                  
    10                                  
    11                                  %include "get_res.inc"
     1                              <1> ;****************************************************************************************************************************
     2                              <1> ; Program name: Non-deterministic Random Numbers
     3                              <1> ; This program generates up to 100 random numbers using the non-deterministic random number generator found inside modern 
     4                              <1> ; x86 microprocessors. The generated numbers are then normalized to the range 1.0 to 2.0 and sorted. 
     5                              <1> ; Copyright (C) 2025 Michelle Pham
     6                              <1> ;                                                                                                                         
     7                              <1> ; This file is part of the software program "Non-deterministic Random Numbers".                                    
     8                              <1> ; "Non-deterministic Random Numbers" is free software: you can redistribute it and/or modify it under the terms of    
     9                              <1> ; the GNU General Public License version 3 as published by the Free Software Foundation.                                  
    10                              <1> ; "Non-deterministic Random Numbers" is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;     
    11                              <1> ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public     
    12                              <1> ; License for more details. A copy of the GNU General Public License v3 is available here: <https://www.gnu.org/licenses/>.
    13                              <1> ;****************************************************************************************************************************
    14                              <1> 
    15                              <1> ;================================================================================================================================
    16                              <1> ;
    17                              <1> ; Author Information
    18                              <1> ;  Name: Michelle Pham
    19                              <1> ;  Email: mp28jam@csu.fullerton.edu
    20                              <1> ;  CWID: 867434789
    21                              <1> ;  Course: CPSC 240-03
    22                              <1> ;
    23                              <1> ; Program Information
    24                              <1> ;  Name: Non-deterministic Random Numbers
    25                              <1> ;  Programming Languages: x86-64 Assembly, C++
    26                              <1> ;  Effective Date: March 25, 2025
    27                              <1> ;  Latest Update: March 25, 2025
    28                              <1> ;  Date open source license added: March 25, 2025
    29                              <1> ;  Files: main.cpp, executive.asm, fill_random_array.asm, isnan.asm
    30                              <1> ;  Status: Incomplete
    31                              <1> ;  References Consulted: Ed Jorgensen, "x86-64 Assembly Language Programming with Ubuntu"
    32                              <1> ;  Future Upgrades: Implement advanced sorting algorithms and parallel number generation.
    33                              <1> ;
    34                              <1> ; Purpose
    35                              <1> ;  This program generates up to 100 random numbers using the non-deterministic random number generator (RDRAND) in modern x86 
    36                              <1> ;  microprocessors. The generated numbers are normalized to the range 1.0 to 2.0 and then sorted to produce an ordered list. The 
    37                              <1> ;  goal is to practice techniques for handling random number generation, normalization, and sorting in x86-64 assembly.
    38                              <1> ;
    39                              <1> ; Development Information
    40                              <1> ;  OS: Ubuntu 22.04.4 LTS
    41                              <1> ;  Text Editor: Visual Studio Code
    42                              <1> ;  Tools: NASM, G++ compiler, GDB
    43                              <1> ;
    44                              <1> ; Current File Information
    45                              <1> ;  Name: utilities.inc
    46                              <1> ;  Language: x86-64 Assembly with Intel syntax
    47                              <1> ;  An include file to store macros for this program.
    48                              <1> ;
    49                              <1> ;================================================================================================================================
    50                              <1> 
    51                              <1> ;Declarations
    52                              <1> ;Back-up GPRs
    53                              <1> %macro    backupGPRs 0
    54                              <1>   push    rbp
    55                              <1>   mov    rbp, rsp
    56                              <1>   push    rbx
    57                              <1>   push    rcx
    58                              <1>   push    rdx
    59                              <1>   push    rsi
    60                              <1>   push    rdi
    61                              <1>   push    r8
    62                              <1>   push    r9
    63                              <1>   push    r10
    64                              <1>   push    r11
    65                              <1>   push    r12
    66                              <1>   push    r13
    67                              <1>   push    r14
    68                              <1>   push    r15
    69                              <1>   pushf
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> ;Restore GPRs
    73                              <1> %macro    restoreGPRs 0
    74                              <1>   popf
    75                              <1>   pop    r15
    76                              <1>   pop    r14
    77                              <1>   pop    r13
    78                              <1>   pop    r12
    79                              <1>   pop    r11
    80                              <1>   pop    r10
    81                              <1>   pop    r9
    82                              <1>   pop    r8
    83                              <1>   pop    rsi
    84                              <1>   pop    rdi
    85                              <1>   pop    rdx
    86                              <1>   pop    rcx
    87                              <1>   pop    rbx
    88                              <1>   pop    rbp
    89                              <1> %endmacro
    90                              <1> 
    91                              <1> %macro    backupNGPRs 1
    92                              <1>   mov    rax, 7
    93                              <1>   mov    rdx, 0
    94                              <1>   xsave    [%1]
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> %macro    restoreNGPRs 1
    98                              <1>   mov    rax, 7
    99                              <1>   mov    rdx, 0
   100                              <1>   xrstor    [%1]
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;Print out author information and calculate the area using Huron's formula
   104                              <1> %macro    authorInfo 0
   105                              <1>   mov    rax, 0
   106                              <1>   mov    rdi, author_info
   107                              <1>   call    printf
   108                              <1> %endmacro
    12                                  global tesla
    13                                  
    14                                  section .data
    15                                  
    16                                  section .bss
    17 00000000 <res 00000340>          backup_storage    resb 832
    18                                  
    19                                  
    20                                  ; R0 = 1/R1 + 1/R2 + 1/R3
    21                                  ; total R = 1/R0
    22                                  
    23                                  ; formula I = E/R 
    24                                  
    25                                  section .text
    26                                  
    27                                  tesla:
    28                                      ; Back up
    29                                      backupGPRs
    29 00000000 55                  <1>  push rbp
    29 00000001 4889E5              <1>  mov rbp, rsp
    29 00000004 53                  <1>  push rbx
    29 00000005 51                  <1>  push rcx
    29 00000006 52                  <1>  push rdx
    29 00000007 56                  <1>  push rsi
    29 00000008 57                  <1>  push rdi
    29 00000009 4150                <1>  push r8
    29 0000000B 4151                <1>  push r9
    29 0000000D 4152                <1>  push r10
    29 0000000F 4153                <1>  push r11
    29 00000011 4154                <1>  push r12
    29 00000013 4155                <1>  push r13
    29 00000015 4156                <1>  push r14
    29 00000017 4157                <1>  push r15
    29 00000019 9C                  <1>  pushf
    30                                      backupNGPRs backup_storage
    30 0000001A B807000000          <1>  mov rax, 7
    30 0000001F BA00000000          <1>  mov rdx, 0
    30 00000024 0FAE2425[00000000]  <1>  xsave [%1]
    31                                  
    32                                      ; Parameters
    33 0000002C 4989FF                      mov     r15, rdi         ; An array of 3 inputted numbers
    34                                      ; use r8, r9, r10, r11, r12
    35                                  
    36                                      ; Find where the radix point is
    37                                      ; TODO: Add checks for non-float using isfloat
    38 0000002F 4D31F6                      xor     r14, r14            ; Index
    39                                  
    40                                  
    41                                      restoreNGPRs backup_storage
    41 00000032 B807000000          <1>  mov rax, 7
    41 00000037 BA00000000          <1>  mov rdx, 0
    41 0000003C 0FAE2C25[00000000]  <1>  xrstor [%1]
    42                                      restoreGPRs
    42 00000044 9D                  <1>  popf
    42 00000045 415F                <1>  pop r15
    42 00000047 415E                <1>  pop r14
    42 00000049 415D                <1>  pop r13
    42 0000004B 415C                <1>  pop r12
    42 0000004D 415B                <1>  pop r11
    42 0000004F 415A                <1>  pop r10
    42 00000051 4159                <1>  pop r9
    42 00000053 4158                <1>  pop r8
    42 00000055 5E                  <1>  pop rsi
    42 00000056 5F                  <1>  pop rdi
    42 00000057 5A                  <1>  pop rdx
    42 00000058 59                  <1>  pop rcx
    42 00000059 5B                  <1>  pop rbx
    42 0000005A 5D                  <1>  pop rbp
    43                                  
