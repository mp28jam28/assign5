     1                                  global atof
     2                                  
     3                                  %include "get_res.inc"
     1                              <1> ;****************************************************************************************************************************
     2                              <1> ; Program name: Non-deterministic Random Numbers
     3                              <1> ; This program generates up to 100 random numbers using the non-deterministic random number generator found inside modern 
     4                              <1> ; x86 microprocessors. The generated numbers are then normalized to the range 1.0 to 2.0 and sorted. 
     5                              <1> ; Copyright (C) 2025 Michelle Pham
     6                              <1> ;                                                                                                                         
     7                              <1> ; This file is part of the software program "Non-deterministic Random Numbers".                                    
     8                              <1> ; "Non-deterministic Random Numbers" is free software: you can redistribute it and/or modify it under the terms of    
     9                              <1> ; the GNU General Public License version 3 as published by the Free Software Foundation.                                  
    10                              <1> ; "Non-deterministic Random Numbers" is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;     
    11                              <1> ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public     
    12                              <1> ; License for more details. A copy of the GNU General Public License v3 is available here: <https://www.gnu.org/licenses/>.
    13                              <1> ;****************************************************************************************************************************
    14                              <1> 
    15                              <1> ;================================================================================================================================
    16                              <1> ;
    17                              <1> ; Author Information
    18                              <1> ;  Name: Michelle Pham
    19                              <1> ;  Email: mp28jam@csu.fullerton.edu
    20                              <1> ;  CWID: 867434789
    21                              <1> ;  Course: CPSC 240-03
    22                              <1> ;
    23                              <1> ; Program Information
    24                              <1> ;  Name: Non-deterministic Random Numbers
    25                              <1> ;  Programming Languages: x86-64 Assembly, C++
    26                              <1> ;  Effective Date: March 25, 2025
    27                              <1> ;  Latest Update: March 25, 2025
    28                              <1> ;  Date open source license added: March 25, 2025
    29                              <1> ;  Files: main.cpp, executive.asm, fill_random_array.asm, isnan.asm
    30                              <1> ;  Status: Incomplete
    31                              <1> ;  References Consulted: Ed Jorgensen, "x86-64 Assembly Language Programming with Ubuntu"
    32                              <1> ;  Future Upgrades: Implement advanced sorting algorithms and parallel number generation.
    33                              <1> ;
    34                              <1> ; Purpose
    35                              <1> ;  This program generates up to 100 random numbers using the non-deterministic random number generator (RDRAND) in modern x86 
    36                              <1> ;  microprocessors. The generated numbers are normalized to the range 1.0 to 2.0 and then sorted to produce an ordered list. The 
    37                              <1> ;  goal is to practice techniques for handling random number generation, normalization, and sorting in x86-64 assembly.
    38                              <1> ;
    39                              <1> ; Development Information
    40                              <1> ;  OS: Ubuntu 22.04.4 LTS
    41                              <1> ;  Text Editor: Visual Studio Code
    42                              <1> ;  Tools: NASM, G++ compiler, GDB
    43                              <1> ;
    44                              <1> ; Current File Information
    45                              <1> ;  Name: utilities.inc
    46                              <1> ;  Language: x86-64 Assembly with Intel syntax
    47                              <1> ;  An include file to store macros for this program.
    48                              <1> ;
    49                              <1> ;================================================================================================================================
    50                              <1> 
    51                              <1> ;Back-up GPRs
    52                              <1> %macro    backupGPRs 0
    53                              <1>   push    rbp
    54                              <1>   mov    rbp, rsp
    55                              <1>   push    rbx
    56                              <1>   push    rcx
    57                              <1>   push    rdx
    58                              <1>   push    rsi
    59                              <1>   push    rdi
    60                              <1>   push    r8
    61                              <1>   push    r9
    62                              <1>   push    r10
    63                              <1>   push    r11
    64                              <1>   push    r12
    65                              <1>   push    r13
    66                              <1>   push    r14
    67                              <1>   push    r15
    68                              <1>   pushf
    69                              <1> %endmacro
    70                              <1> 
    71                              <1> ;Restore GPRs
    72                              <1> %macro    restoreGPRs 0
    73                              <1>   popf
    74                              <1>   pop    r15
    75                              <1>   pop    r14
    76                              <1>   pop    r13
    77                              <1>   pop    r12
    78                              <1>   pop    r11
    79                              <1>   pop    r10
    80                              <1>   pop    r9
    81                              <1>   pop    r8
    82                              <1>   pop    rsi
    83                              <1>   pop    rdi
    84                              <1>   pop    rdx
    85                              <1>   pop    rcx
    86                              <1>   pop    rbx
    87                              <1>   pop    rbp
    88                              <1> %endmacro
    89                              <1> 
    90                              <1> %macro    backupNGPRs 1
    91                              <1>   mov    rax, 7
    92                              <1>   mov    rdx, 0
    93                              <1>   xsave    [%1]
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> %macro    restoreNGPRs 1
    97                              <1>   mov    rax, 7
    98                              <1>   mov    rdx, 0
    99                              <1>   xrstor    [%1]
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> 
   103                              <1> %macro GET_ARRAY_INPUT 3
   104                              <1>     ; %1 = destination array (e.g., arr)
   105                              <1>     ; %2 = number of elements (e.g., 3)
   106                              <1>     ; %3 = string buffer size (e.g., 32)
   107                              <1> 
   108                              <1>     xor    r15, r15             ; r15 = index
   109                              <1>     mov    r13, %1              ; r13 = base address of array
   110                              <1>     mov    r14, %2              ; r14 = number of elements
   111                              <1> 
   112                              <1> .loop_start:
   113                              <1>     cmp    r15, r14
   114                              <1>     jge    .loop_end
   115                              <1> 
   116                              <1> .loop_input:
   117                              <1>     xor    rax, rax             ; clear rax
   118                              <1>     push   qword 0              ; align stack (16-byte)
   119                              <1>     push   qword 0
   120                              <1> 
   121                              <1>     mov    rax, 0               ; syscall: SYS_read
   122                              <1>     mov    rdi, 0               ; STDIN
   123                              <1>     mov    rsi, rsp             ; buffer (top of stack)
   124                              <1>     mov    rdx, 32              ; buffer size (e.g., 32)
   125                              <1>     syscall
   126                              <1> 
   127                              <1>     cmp    eax, -1
   128                              <1>     je     .ctrl_d
   129                              <1> 
   130                              <1> 
   131                              <1>     mov     rcx, 0
   132                              <1> .loop_trim:
   133                              <1>     mov     al, byte [rsp + rcx]
   134                              <1>     cmp     al, 0
   135                              <1>     je      .done_trim
   136                              <1>     cmp     al, 10             ; newline?
   137                              <1>     jne     .not_newline
   138                              <1>     mov     byte [rsp + rcx], 0
   139                              <1>     jmp     .done_trim
   140                              <1> .not_newline:
   141                              <1>     inc     rcx
   142                              <1>     jmp     .loop_trim
   143                              <1> .done_trim:
   144                              <1> 
   145                              <1>     xor    rax, rax
   146                              <1>     mov    rdi, rsp
   147                              <1>     call   isfloat
   148                              <1>     cmp    rax, 0
   149                              <1>     je     .invalid_input
   150                              <1> 
   151                              <1>     ; Convert input string to float
   152                              <1>     xor    rax, rax
   153                              <1>     mov    rdi, rsp
   154                              <1>     call   atof
   155                              <1>     movsd  xmm15, xmm0
   156                              <1> 
   157                              <1>     ; Store into array
   158                              <1>     movsd [r13 + r15*8], xmm15
   159                              <1> 
   160                              <1>     inc    r15
   161                              <1> 
   162                              <1>     pop    rax
   163                              <1>     pop    rax
   164                              <1> 
   165                              <1>     jmp    .loop_start
   166                              <1> 
   167                              <1> .invalid_input:
   168                              <1>     pop    rax
   169                              <1>     pop    rax
   170                              <1> 
   171                              <1>     xor    rax, rax
   172                              <1>     mov    rax, 1               ; syscall: SYS_write
   173                              <1>     mov    rdi, 1               ; STDOUT
   174                              <1>     mov    rsi, prompt_input    ; prompt message address
   175                              <1>     mov    rdx, 27              ; length of prompt message
   176                              <1>     syscall
   177                              <1> 
   178                              <1>     jmp    .loop_input          ; retry input for the same index
   179                              <1> 
   180                              <1> .ctrl_d:
   181                              <1>     pop    rax
   182                              <1>     pop    rax
   183                              <1> 
   184                              <1> .loop_end:
   185                              <1>     mov    rax, r15   
   186                              <1> %endmacro
   187                              <1> 
   188                              <1> 
     4                                  
     5                                  section .data
     6 00000000 0000000000000080            neg_mask dq 0x8000000000000000
     7                                  
     8                                  section .bss
     9                                      align 64
    10 00000000 <res 00000340>              storedata resb 832
    11                                  
    12                                  section .text
    13                                  
    14                                  atof:
    15                                      ; Save registers and SIMD state
    16                                      backupGPRs
    16 00000000 55                  <1>  push rbp
    16 00000001 4889E5              <1>  mov rbp, rsp
    16 00000004 53                  <1>  push rbx
    16 00000005 51                  <1>  push rcx
    16 00000006 52                  <1>  push rdx
    16 00000007 56                  <1>  push rsi
    16 00000008 57                  <1>  push rdi
    16 00000009 4150                <1>  push r8
    16 0000000B 4151                <1>  push r9
    16 0000000D 4152                <1>  push r10
    16 0000000F 4153                <1>  push r11
    16 00000011 4154                <1>  push r12
    16 00000013 4155                <1>  push r13
    16 00000015 4156                <1>  push r14
    16 00000017 4157                <1>  push r15
    16 00000019 9C                  <1>  pushf
    17 0000001A B807000000                  mov     rax, 7
    18 0000001F BA00000000                  mov     rdx, 0
    19 00000024 0FAE2425[00000000]          xsave   [storedata]
    20                                  
    21 0000002C 4989FF                      mov     r15, rdi            ; r15 = pointer to input string
    22 0000002F 4D31F6                      xor     r14, r14            ; r14 = index to find decimal point
    23                                  
    24                                  search_dot:
    25 00000032 43803C372E                  cmp     byte [r15 + r14], '.'
    26 00000037 7405                        je      dot_found
    27 00000039 49FFC6                      inc     r14
    28 0000003C EBF4                        jmp     search_dot
    29                                  
    30                                  dot_found:
    31 0000003E 4D31ED                      xor     r13, r13            ; r13 = parsed integer value
    32 00000041 41BC01000000                mov     r12, 1              ; r12 = multiplier for digit place
    33 00000047 4D89F3                      mov     r11, r14            ; r11 = index before the dot
    34 0000004A 49FFCB                      dec     r11
    35 0000004D 4D31D2                      xor     r10, r10            ; r10 = flag for negative number
    36                                  
    37                                  parse_whole:
    38 00000050 438A041F                    mov     al, byte [r15 + r11]
    39 00000054 3C2B                        cmp     al, '+'
    40 00000056 7422                        je      end_whole
    41 00000058 3C2D                        cmp     al, '-'
    42 0000005A 7418                        je      set_negative
    43                                  
    44 0000005C 2C30                        sub     al, '0'
    45 0000005E 490FAFC4                    imul    rax, r12
    46 00000062 4901C5                      add     r13, rax
    47 00000065 4D6BE40A                    imul    r12, 10
    48 00000069 49FFCB                      dec     r11
    49 0000006C 4983FB00                    cmp     r11, 0
    50 00000070 7DDE                        jge     parse_whole
    51 00000072 EB06                        jmp     end_whole
    52                                  
    53                                  set_negative:
    54 00000074 41BA01000000                mov     r10, 1
    55                                  
    56                                  end_whole:
    57 0000007A B80A000000                  mov     rax, 10
    58 0000007F F24C0F2AD8                  cvtsi2sd xmm11, rax         ; xmm11 = 10.0
    59 00000084 66450FEFED                  pxor    xmm13, xmm13        ; xmm13 = decimal accumulator
    60 00000089 F2450F10E3                  movsd   xmm12, xmm11        ; xmm12 = initial divisor (10.0)
    61                                  
    62 0000008E 49FFC6                      inc     r14                 ; Move past the '.'
    63                                  
    64                                  parse_frac:
    65 00000091 438A0437                    mov     al, byte [r15 + r14]
    66 00000095 2C30                        sub     al, '0'
    67 00000097 F2480F2AC0                  cvtsi2sd xmm0, rax
    68 0000009C F2410F5EC4                  divsd   xmm0, xmm12
    69 000000A1 F2440F58E8                  addsd   xmm13, xmm0
    70 000000A6 F2450F59E3                  mulsd   xmm12, xmm11
    71 000000AB 49FFC6                      inc     r14
    72 000000AE 43803C3700                  cmp     byte [r15 + r14], 0
    73 000000B3 75DC                        jne     parse_frac
    74                                  
    75 000000B5 F2490F2AC5                  cvtsi2sd xmm0, r13
    76 000000BA F2410F58C5                  addsd   xmm0, xmm13         ; xmm0 = full float value
    77                                  
    78 000000BF 4983FA00                    cmp     r10, 0
    79 000000C3 740C                        je      finish
    80                                  
    81                                      ; If negative, apply negation by flipping sign bit
    82 000000C5 F20F100C25-                 movsd   xmm1, [neg_mask]
    82 000000CA [00000000]         
    83 000000CE 0F57C1                      xorps   xmm0, xmm1
    84                                  
    85                                  finish:
    86 000000D1 6A00                        push    qword 0
    87 000000D3 F20F110424                  movsd   [rsp], xmm0
    88                                  
    89                                      ; Restore SIMD state and registers
    90 000000D8 B807000000                  mov     rax, 7
    91 000000DD BA00000000                  mov     rdx, 0
    92 000000E2 0FAE2C25[00000000]          xrstor  [storedata]
    93 000000EA F20F100424                  movsd   xmm0, [rsp]
    94 000000EF 58                          pop     rax
    95                                  
    96                                      restoreGPRs
    96 000000F0 9D                  <1>  popf
    96 000000F1 415F                <1>  pop r15
    96 000000F3 415E                <1>  pop r14
    96 000000F5 415D                <1>  pop r13
    96 000000F7 415C                <1>  pop r12
    96 000000F9 415B                <1>  pop r11
    96 000000FB 415A                <1>  pop r10
    96 000000FD 4159                <1>  pop r9
    96 000000FF 4158                <1>  pop r8
    96 00000101 5E                  <1>  pop rsi
    96 00000102 5F                  <1>  pop rdi
    96 00000103 5A                  <1>  pop rdx
    96 00000104 59                  <1>  pop rcx
    96 00000105 5B                  <1>  pop rbx
    96 00000106 5D                  <1>  pop rbp
    97 00000107 C3                          ret
