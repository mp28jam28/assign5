     1                                  global atof
     2                                  
     3                                  %include "get_res.inc"
     1                              <1> ;****************************************************************************************************************************
     2                              <1> ; Program name: Non-deterministic Random Numbers
     3                              <1> ; This program generates up to 100 random numbers using the non-deterministic random number generator found inside modern 
     4                              <1> ; x86 microprocessors. The generated numbers are then normalized to the range 1.0 to 2.0 and sorted. 
     5                              <1> ; Copyright (C) 2025 Michelle Pham
     6                              <1> ;                                                                                                                         
     7                              <1> ; This file is part of the software program "Non-deterministic Random Numbers".                                    
     8                              <1> ; "Non-deterministic Random Numbers" is free software: you can redistribute it and/or modify it under the terms of    
     9                              <1> ; the GNU General Public License version 3 as published by the Free Software Foundation.                                  
    10                              <1> ; "Non-deterministic Random Numbers" is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;     
    11                              <1> ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public     
    12                              <1> ; License for more details. A copy of the GNU General Public License v3 is available here: <https://www.gnu.org/licenses/>.
    13                              <1> ;****************************************************************************************************************************
    14                              <1> 
    15                              <1> ;================================================================================================================================
    16                              <1> ;
    17                              <1> ; Author Information
    18                              <1> ;  Name: Michelle Pham
    19                              <1> ;  Email: mp28jam@csu.fullerton.edu
    20                              <1> ;  CWID: 867434789
    21                              <1> ;  Course: CPSC 240-03
    22                              <1> ;
    23                              <1> ; Program Information
    24                              <1> ;  Name: Non-deterministic Random Numbers
    25                              <1> ;  Programming Languages: x86-64 Assembly, C++
    26                              <1> ;  Effective Date: March 25, 2025
    27                              <1> ;  Latest Update: March 25, 2025
    28                              <1> ;  Date open source license added: March 25, 2025
    29                              <1> ;  Files: main.cpp, executive.asm, fill_random_array.asm, isnan.asm
    30                              <1> ;  Status: Incomplete
    31                              <1> ;  References Consulted: Ed Jorgensen, "x86-64 Assembly Language Programming with Ubuntu"
    32                              <1> ;  Future Upgrades: Implement advanced sorting algorithms and parallel number generation.
    33                              <1> ;
    34                              <1> ; Purpose
    35                              <1> ;  This program generates up to 100 random numbers using the non-deterministic random number generator (RDRAND) in modern x86 
    36                              <1> ;  microprocessors. The generated numbers are normalized to the range 1.0 to 2.0 and then sorted to produce an ordered list. The 
    37                              <1> ;  goal is to practice techniques for handling random number generation, normalization, and sorting in x86-64 assembly.
    38                              <1> ;
    39                              <1> ; Development Information
    40                              <1> ;  OS: Ubuntu 22.04.4 LTS
    41                              <1> ;  Text Editor: Visual Studio Code
    42                              <1> ;  Tools: NASM, G++ compiler, GDB
    43                              <1> ;
    44                              <1> ; Current File Information
    45                              <1> ;  Name: utilities.inc
    46                              <1> ;  Language: x86-64 Assembly with Intel syntax
    47                              <1> ;  An include file to store macros for this program.
    48                              <1> ;
    49                              <1> ;================================================================================================================================
    50                              <1> 
    51                              <1> ;Back-up GPRs
    52                              <1> %macro    backupGPRs 0
    53                              <1>   push    rbp
    54                              <1>   mov    rbp, rsp
    55                              <1>   push    rbx
    56                              <1>   push    rcx
    57                              <1>   push    rdx
    58                              <1>   push    rsi
    59                              <1>   push    rdi
    60                              <1>   push    r8
    61                              <1>   push    r9
    62                              <1>   push    r10
    63                              <1>   push    r11
    64                              <1>   push    r12
    65                              <1>   push    r13
    66                              <1>   push    r14
    67                              <1>   push    r15
    68                              <1>   pushf
    69                              <1> %endmacro
    70                              <1> 
    71                              <1> ;Restore GPRs
    72                              <1> %macro    restoreGPRs 0
    73                              <1>   popf
    74                              <1>   pop    r15
    75                              <1>   pop    r14
    76                              <1>   pop    r13
    77                              <1>   pop    r12
    78                              <1>   pop    r11
    79                              <1>   pop    r10
    80                              <1>   pop    r9
    81                              <1>   pop    r8
    82                              <1>   pop    rsi
    83                              <1>   pop    rdi
    84                              <1>   pop    rdx
    85                              <1>   pop    rcx
    86                              <1>   pop    rbx
    87                              <1>   pop    rbp
    88                              <1> %endmacro
    89                              <1> 
    90                              <1> %macro    backupNGPRs 1
    91                              <1>   mov    rax, 7
    92                              <1>   mov    rdx, 0
    93                              <1>   xsave    [%1]
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> %macro    restoreNGPRs 1
    97                              <1>   mov    rax, 7
    98                              <1>   mov    rdx, 0
    99                              <1>   xrstor    [%1]
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;Print out author information and calculate the area using Huron's formula
   103                              <1> %macro    authorInfo 0
   104                              <1>   mov    rax, 0
   105                              <1>   mov    rdi, author_info
   106                              <1>   call    printf
   107                              <1> %endmacro
   108                              <1> 
   109                              <1> 
   110                              <1> %macro GET_ARRAY_INPUT 3
   111                              <1>     ; %1 = destination array (e.g., arr)
   112                              <1>     ; %2 = number of elements (e.g., 3)
   113                              <1>     ; %3 = string buffer size (e.g., 32)
   114                              <1> 
   115                              <1>     xor    r15, r15             ; r15 = index
   116                              <1>     mov    r13, %1              ; r13 = base address of array
   117                              <1>     mov    r14, %2              ; r14 = number of elements
   118                              <1> 
   119                              <1> .loop_start:
   120                              <1>     cmp    r15, r14
   121                              <1>     jge    .loop_end
   122                              <1> 
   123                              <1>     push   qword 0              ; align stack for scanf (16-byte)
   124                              <1>     push   qword 0
   125                              <1> 
   126                              <1>     mov    rax, 0               ; syscall: SYS_read (0)
   127                              <1>     mov    rdi, 0               ; STDIN
   128                              <1>     mov    rsi, rsp             ; buffer (top of stack)
   129                              <1>     mov    rdx, %3              ; buffer size (e.g., 32)
   130                              <1>     syscall
   131                              <1> 
   132                              <1>     ; Convert input string to double
   133                              <1>     mov    rax, 0
   134                              <1>     mov    rdi, rsp
   135                              <1>     call   atof
   136                              <1>     movsd  xmm15, xmm0
   137                              <1> 
   138                              <1>     ; Store into array
   139                              <1>     movsd  qword [r13 + r15*8], xmm15
   140                              <1> 
   141                              <1>     inc    r15
   142                              <1> 
   143                              <1>     pop    rax
   144                              <1>     pop    rax
   145                              <1> 
   146                              <1>     jmp    .loop_start
   147                              <1> 
   148                              <1> .loop_end:
   149                              <1> %endmacro
     4                                  section .data
     5 00000000 0000000000000080            neg_mask dq 0x8000000000000000
     6                                  
     7                                  section .bss
     8                                      align 64
     9 00000000 <res 00000340>              storedata resb 832
    10                                  
    11                                  section .text
    12                                  atof:
    13                                      ; Back up
    14                                      backupGPRs
    14 00000000 55                  <1>  push rbp
    14 00000001 4889E5              <1>  mov rbp, rsp
    14 00000004 53                  <1>  push rbx
    14 00000005 51                  <1>  push rcx
    14 00000006 52                  <1>  push rdx
    14 00000007 56                  <1>  push rsi
    14 00000008 57                  <1>  push rdi
    14 00000009 4150                <1>  push r8
    14 0000000B 4151                <1>  push r9
    14 0000000D 4152                <1>  push r10
    14 0000000F 4153                <1>  push r11
    14 00000011 4154                <1>  push r12
    14 00000013 4155                <1>  push r13
    14 00000015 4156                <1>  push r14
    14 00000017 4157                <1>  push r15
    14 00000019 9C                  <1>  pushf
    15                                  
    16 0000001A B807000000                  mov     rax, 7
    17 0000001F BA00000000                  mov     rdx, 0
    18 00000024 0FAE2425[00000000]          xsave   [storedata]    
    19                                  
    20                                      ; Parameters
    21 0000002C 4989FF                      mov     r15, rdi            ; An array of char with null termination expected
    22                                  
    23                                      ; Find where the radix point is
    24                                      ; TODO: Add checks for non-float using isfloat
    25 0000002F 4D31F6                      xor     r14, r14            ; Index for the radix point
    26                                  find_radix_loop:
    27 00000032 43803C372E                  cmp     byte[r15 + r14], '.'
    28 00000037 7405                        je      found_radix_point
    29                                  
    30 00000039 49FFC6                      inc     r14
    31 0000003C EBF4                        jmp     find_radix_loop
    32                                  
    33                                  found_radix_point:
    34                                      ; Set up registers for integer part parsing
    35 0000003E 4D31ED                      xor     r13, r13            ; Integer total
    36 00000041 41BC01000000                mov     r12, 1              ; Integer multiplier 1, 10, 100, 1000,...
    37 00000047 4D89F3                      mov     r11, r14            ; Make a copy of the radix point
    38 0000004A 49FFCB                      dec     r11                 
    39 0000004D 4D31D2                      xor     r10, r10            ; Flag 0 = positive, 1 = negative
    40                                  
    41                                  parse_integer:
    42 00000050 438A041F                    mov     al, byte[r15 + r11]
    43 00000054 3C2B                        cmp     al, '+'
    44 00000056 7422                        je      finish_parse_integer
    45 00000058 3C2D                        cmp     al, '-'
    46 0000005A 7418                        je      parse_integer_negative
    47                                  
    48                                      ; Convert the ASCII character to in integer and add it to the total
    49 0000005C 2C30                        sub     al, '0'             ; Subtract 48 from the ASCII to get integer value
    50 0000005E 490FAFC4                    imul    rax, r12            ; Multiply the integer value with 1, 10, 100, 1000,...
    51 00000062 4901C5                      add     r13, rax            ; Add the multiplied value to the total
    52 00000065 4D6BE40A                    imul    r12, 10             ; Increase the multiplier exponentially by 10
    53                                  
    54 00000069 49FFCB                      dec     r11                 ; Move the index from the radix point toward the front of the string
    55 0000006C 4983FB00                    cmp     r11, 0              ; Keep looping until all integer part are parsed
    56 00000070 7DDE                        jge     parse_integer    
    57 00000072 EB06                        jmp     finish_parse_integer
    58                                  
    59                                  parse_integer_negative:
    60 00000074 41BA01000000                mov     r10, 1              ; Set r10 to 1 to flag the number as negative
    61                                  
    62                                  finish_parse_integer:
    63                                      ; Set up values for decimal part parsing  
    64 0000007A B80A000000                  mov     rax, 10             ; Load 10 into rax
    65 0000007F F24C0F2AD8                  cvtsi2sd xmm11, rax         ; Load 10.0 into xmm11   
    66 00000084 66450F57ED                  xorpd   xmm13, xmm13        ; Decimal total
    67 00000089 F2450F10E3                  movsd   xmm12,xmm11         ; Decimal divisor 10, 100, 1000,...
    68 0000008E 49FFC6                      inc     r14
    69                                  
    70                                  parse_decimal:
    71 00000091 438A0437                    mov     al, byte [r15 + r14]
    72 00000095 2C30                        sub     al, '0'             ; Subtract 48 from the ASCII to get integer value
    73                                  
    74                                      ; Convert the ASCII character to decimal value
    75 00000097 F2480F2AC0                  cvtsi2sd xmm0, rax          ; Load the integer value into an xmm register for division
    76 0000009C F2410F5EC4                  divsd   xmm0, xmm12         ; Divide the integer value by 10, 100, 1000,...
    77 000000A1 F2440F58E8                  addsd   xmm13, xmm0         ; Add the decimal value to the total
    78 000000A6 F2450F59E3                  mulsd   xmm12, xmm11        ; Increase the decimal divisor exponentially by 10
    79                                  
    80 000000AB 49FFC6                      inc     r14                 ; Keep looping until null termination is found.
    81 000000AE 43803C3700                  cmp     byte[r15 + r14], 0
    82 000000B3 75DC                        jne     parse_decimal
    83                                  
    84                                      ; Add the parsed integer and decimal part together
    85 000000B5 F2490F2AC5                  cvtsi2sd xmm0, r13
    86 000000BA F2410F58C5                  addsd   xmm0, xmm13
    87                                  
    88                                      ; Check the negative flag 0 = positive, 1 = negative
    89 000000BF 4983FA00                    cmp     r10, 0
    90 000000C3 740D                        je      return
    91                                  
    92                                      ; Negate the number of the flag is equal to 1
    93 000000C5 F20F100C25-                 movsd xmm1, [neg_mask]      ; Load the negation mask into xmm1
    93 000000CA [00000000]         
    94 000000CE 660F57C1                    xorpd xmm0, xmm1 
    95                                  
    96                                  return:
    97                                      ; Return
    98 000000D2 6A00                        push    qword 0
    99 000000D4 F20F110424                  movsd   [rsp], xmm0
   100                                  
   101 000000D9 B807000000                  mov     rax, 7
   102 000000DE BA00000000                  mov     rdx, 0
   103 000000E3 0FAE2C25[00000000]          xrstor  [storedata]
   104                                  
   105 000000EB F20F100424                  movsd   xmm0, [rsp]
   106 000000F0 58                          pop     rax
   107                                  
   108                                      ; Restore
   109                                      restoreGPRs
   109 000000F1 9D                  <1>  popf
   109 000000F2 415F                <1>  pop r15
   109 000000F4 415E                <1>  pop r14
   109 000000F6 415D                <1>  pop r13
   109 000000F8 415C                <1>  pop r12
   109 000000FA 415B                <1>  pop r11
   109 000000FC 415A                <1>  pop r10
   109 000000FE 4159                <1>  pop r9
   109 00000100 4158                <1>  pop r8
   109 00000102 5E                  <1>  pop rsi
   109 00000103 5F                  <1>  pop rdi
   109 00000104 5A                  <1>  pop rdx
   109 00000105 59                  <1>  pop rcx
   109 00000106 5B                  <1>  pop rbx
   109 00000107 5D                  <1>  pop rbp
   110                                  
   111 00000108 C3                          ret
